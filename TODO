                            WebAuth To-Do List

Protocol:

 * Currently, there is no good logout strategy other than closing the
   browser, since the user remains logged in to each web site they've
   visited even if they go to the logout page on the weblogin server and
   destroy their global credentials.  The best solution to this proposed
   so far is to maintain global state on the WebKDC servers (shared
   between them somehow) and to have the WebAuth servers query the WebKDC
   to see whether the credentials are still valid.  This is a lot of work
   and raises some basic questions (such as, is HTTPS too slow for that
   query from the WebAuth server).

   In the meantime, having the WebAuth logout handler automatically
   redirect to the weblogin logout page might ameliorate some of the
   problems.

 * Allow a WebAuth Application Server to specify that authentication
   should be done using a particular instance (and perhaps only a
   particular realm?) so that the WebLogin server knows to manage a
   different set of single sign-on credentials for that user.  This allows
   applications with specific credential requirements to not interfere
   with a user's other logins.  (WEBAUTH-6)

 * Rather than using our own Kerberos ticket serialization format, store
   tickets in the form that would be used when forwarding tickets, thus
   letting the Kerberos library do the encoding and decoding for us.

 * Use a better key for the HMAC than the encryption key of the token.

 * Redo the WebKDC XML protocol to look more like a modern web services
   interface.

 * User request: Currently, WebAuth always appends ?WEBAUTHR even if
   there's already an ? in the URL, which means that applications that
   want to do WebAuth themselves cannot do normal CGI parsing of the URL.
   Just changing this would break backward compatibility, so a new option
   needs to be added to the request token allowing the implementation to
   request proper CGI syntax be used in the URL.  This option should
   probably be on by default with new versions of mod_webauth, since it's
   cleaner and doesn't cause any harm.

 * Validation of Kerberos authenticators in mod_webauth just blindly does
   a krb5_aname_to_localname and then compares against the subject.  The
   decision of whether to strip the realm may be more complex than that.
   Figure out the right thing to do here, which is not obvious; perhaps
   require that REMOTE_USER be a full principal name if krb5
   authenticators are used?

 * Provide a way to separate authentication identity and authorization
   identity and convey both of those to the WAS, including configuration
   on the WAS to use the authorization identity for access control instead
   of the authentication identity.  This must satisfy the following
   constraints:

   + Backward-compatible so that existing WebAuth servers use the
     authentication identity.

   + Use of the authorization identity must be strictly opt-in.

   Requires some sort of configuration database on the WebLogin server
   to configure who can proxy as another user and to which sites (and to
   which users), with logic in the WebLogin screen to allow the user to
   choose an identity after authentication.  Requires sending the separate
   authorization identity as a new protocol element in the id token.  Best
   done after the proxy fix is complete so that we don't also have to
   modify proxy tokens.  (WEBAUTH-16)

General:

 * Currently, all module errors are logged with ap_log_error.  It looks
   like we should be using ap_log_rerror when there's a request available
   and ap_log_cerror (but only with Apache 2.0.55 and later) when there's
   a connection available.  This would probably include more useful
   details in the logs.

 * We're always passing a status of zero to all calls to ap_log_error, but
   in some cases we do have an error status that we should be passing in.

libwebauth:

 * Provide a way to report diagnostic warnings in the library, and use
   that to report user information service failures when ignore_failure is
   set.

 * Deal with memory allocation failure in the library.  Set a default abort
   function that blows up the whole application if one isn't already set.

 * Convert the rest of the libwebauth interface to use APR and to set the
   error message in the WebAuth context instead of just returning error
   codes.  (WEBAUTH-7)

 * The current library interface is very low-level.  Ideally, the library
   should treat particular WebAuth tokens as first-class objects with
   their own manipulation functions and not expose all of the low-level
   marshal and unmarshal functions to clients.

 * Switch all the WebAuth library interfaces to using opaque structs
   instead of typedefs, matching our current coding style.  (WEBAUTH-7)

 * webauth_attr_list_add_time assumes that timestamps are unsigned 32-bit
   values.

 * String to number conversion in the WebAuth library is being done with
   atol instead of with strtol and with error checking.

 * Add locking to the code reading and writing keyrings so that two
   processes don't simultaneously update a keyring.

 * Stop including addresses in serialized Kerberos tickets and figure out
   what to do about the is_skey attribute.

 * Once logging is available, log better error messages when reading
   keytabs and obtaining initial credentials fails.

 * Replace the internal verify_tgt function with krb5_verify_init_creds.

 * The code to get a Kerberos error message always just uses com_err right
   now.  This needs modification to call the appropriate Kerberos error
   message function.

 * Support configuration of options for initial Kerberos tickets, such as
   ticket lifetime.  We also probably want to suppress some options by
   default that we never use.

 * Do proper error handling in the case where random number initialization
   fails.

 * Format times properly when reporting errors about expired or stale
   tokens from token decoding.

mod_webauth:

 * Support setting HttpOnly flag in the generated cookies.

 * Provide a way to force reauthentication of a user who has valid
   credentials but ones that are about to expire, and apply it only to
   GET requests and not POST requests.  This would be useful for wikis,
   for example, where expired credentials will usually destroy whatever
   work the user is trying to save.

 * If mod_webauth obtains a proxy token instead of an id token and
   WebAuthSubjectAuthType is set to krb5, mod_webauth needs to request an
   id token from the WebKDC and then verify it rather than simply trusting
   the identity in the proxy token.

 * Allow WebAuthExtraRedirect in the server and virtual host
   configuration.

 * Add support for WebAuthDoLogout in an .htaccess file.

 * Check the Cookie header for multiple webauth_at cookies and try each of
   them.  This works around a bug in IE 7 where bar.com cookies are sent
   to foo.bar.com as well as the foo.bar.com cookies.

 * Support setting request headers in addition to or instead of environment
   variables, which will help when using proxy_http to, for example, a
   Tomcat server.

 * Stop requiring the trailing ; at the end of the token when that's the
   end of the URL.  It is stripped in some obscure situations by IE when
   using header redirects, and in general ; is a separator rather than a
   terminator.  If the token is truncated, we'll catch that anyway during
   decoding.

 * User request: Provide a way to require additional factors only when
   coming from a certain IP address or IP address range.  This allows
   multifactor restrictions only for off-campus addresses, for example.
   This may be easier with the Apache 2.4 rework of the authorization
   infrastructure.  (WEBAUTH-15)

mod_webauthldap:

 * User request: There's no inherent reason why mod_webauthldap needs to
   be limited to working with mod_webauth.  Allow additional auth types to
   be processed, or remove auth-type restrictions entirely and just rely
   on require privgroup.  This will also require using REMOTE_USER instead
   of WEBAUTH_USER and, for use with mod_auth_kerb, dealing with a
   REMOTE_USER that's qualified with the realm.

 * User request: It would be nice to support multiple keytabs and different
   credentials in different virtual hosts so that the server would switch
   credentials and see different data depending on the context.  This would
   require a significant reworking of the internals.

 * Currently, WebAuthLdapKeytab is defined to be acceptable in virtual
   hosts.  A caution should be added that it's not reasonable to define
   multiple keytabs, since the implementation currently only supports one
   set of authentication credentials.

 * Add to mod_webauthldap a way to deny access if a user is a member of a
   particular privgroup.

 * Support listing multiple privgroups on the same line in the
   mod_webauthldap module using the iterate flag.

 * Support setting request headers in addition to or instead of environment
   variables, which will help when using proxy_http to, for example, a
   Tomcat server.

 * Support configuring multiple LDAP servers to query so that failover is
   supported.  (WEBAUTH-2)

mod_webkdc:

 * Don't allow a failed user information service query to satisfy random
   multifactor.

 * Return from a password login any additional information provided by
   the KDC, such as upcoming password expiration information.  (WEBAUTH-17)

 * Ensure there is a proper return from a password login for an expired
   password so that it can be recognized and acted on by the WebLogin
   server.

 * A better error message when one talks to the WebKDC directly with a
   browser would be nice.  The current message is rather baffling, and it
   would be good to tell the naive user to set up an application server or
   weblogin server.

 * Write a custom merging function for WebKdcLocalRealms so that the
   keywords are preserved properly.  If a keyword is set, that should
   override any list of realms, but if both the old and new configuration
   contain list of realms, they should be combined.

 * Support an "any" option for WebKdcPermittedRealms so that the default
   can be explicitly set (possibly overriding an earlier explicit list).

 * Improve logging for better metrics analysis.  More clearly indicate
   success versus failure, log clearly whether authentication was via
   username/password or via a single sign-on cookie, and find a way to
   differentiate between trusted Apache authentication and single sign-on.

 * Investigate implementing the GSSAPI-RPC protocol for the WebKDC.
   (WEBAUTH-12)

WebLogin:

 * Set HttpOnly flag in the generated cookies.  (WEBAUTH-4)

 * Pass the password expiration information to the templates as seconds
   since epoch rather than as pre-formatted dates.  This will be
   friendlier to localized interfaces.  (WEBAUTH-14)

 * When going to a site with multiple pieces of content protected by
   WebAuth, the browser seems to go to WebLogin multiple times, and for
   some of those times there's an error "no cookie, even after
   redirection" in the logs.  Figure out what's going on and fix it.

 * Fix Perl warnings when going directly to the password change screen.

 * Display a message if the password prompt is forced in order to get a
   TGT for credential delegation to the destination site.

 * Add a web services interface for the WebLogin login process and
   documentation for how to parse the redirect URL and make the login
   request, returning the return URL.  (WEBAUTH-9)

 * The error page should return the appropriate HTTP error code instead of
   success.

 * Incorporate the Stanford advanced settings page into the included
   WebLogin scripts, used to set the cookie saying to use Negotiate-Auth.

 * Add a replay cache for WebLogin interactions, possibly using memcached,
   so that one cannot use the browser back button to reply a password
   login after the previous user has logged out.  (WEBAUTH-10)

 * Add a rate limit for WebLogin logins that blocks excessive failed
   password attempts for a specific user.  (WEBAUTH-11)

 * Separate the two functions of @REMUSER_REALMS so that people can
   configure a set of realms to be stripped separately from a set of
   realms that are permitted.

 * Add a checkbox to the login page indicating that the user is coming
   from a public cluster.  If checked, don't set a single sign-on cookie.
   (WEBAUTH-13)

Perl Modules:

 * Refactor the Perl modules to match my Perl coding style and add POD
   documentation to all of the modules.  (WEBAUTH-8)

Test Suite:

 * A test suite (and a redesign of the code so that it can be tested) is
   desperately needed for all the code currently embedded in Apache
   modules.

Documentation:

 * Rename instances of user metadata service to user information service
   to be consistent throughout.

 * Rewrite the protocol specification to provide a better-structured and
   more complete introduction to the protocol and defining terms earlier
   and more consistently.

 * Describe the multifactor design and implementation in the protocol
   specification, particularly including the criteria used when deciding
   whether to merge factors together as initial factors.

 * Add POD documentation for all Perl modules.  Many of the WebKDC modules
   currently don't have documentation.

 * Write design notes / internals documentation for how WebAuth is put
   together.

 * Update the docs/test-plan document and check it against the current
   implementation and the set of things that can be tested (such as SPNEGO
   and advanced configuration).

 * Document the multifactor page flow in docs/weblogin-flow.

Style:

 * The mod_webauthldap module needs a lot of formatting and coding style
   cleanup.

 * All of WebAuth needs a general dead code removal pass and evaluation of
   all the places marked FIXME, spawning either entries for this list or
   removal as unimportant.

 * Change all header guards prefixed with an underscore and a capital
   letter.  Those identifiers are reserved by the C standard.
