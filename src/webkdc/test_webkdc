#!/usr/pubsw/bin/perl

use strict;
use warnings;

use lib '../bindings/perl/WebAuth/blib/lib';
use lib '../bindings/perl/WebAuth/blib/arch/auto/WebAuth';

use WebAuth;
use WebKDC;
use WebKDC::IdToken;
use WebKDC::ResponseToken;
use WebKDC::RequestToken;

use vars qw($CONFIG_WAS_KEYTAB);

$CONFIG_WAS_KEYTAB = "shred_webauth.keytab";


sub was_get_krb5_mk_req($) {
    my $keytab = shift;

}

eval {

    my $c = WebAuth::krb5_new();

    WebAuth::krb5_init_via_keytab($c, $CONFIG_WAS_KEYTAB);

    my $princ = WebAuth::krb5_service_principal($c, 
						$WebKDC::C_WEBKDC_K5SERVICE,
						$WebKDC::C_WEBKDC_HOST);
    my $request = WebAuth::krb5_mk_req($c, $princ);

    my ($service_token_str, $session_key, $expiration_time) =
	WebKDC::make_service_token_from_krb5_cred($request);

    my $key = WebAuth::key_create(WebAuth::WA_AES_KEY, $session_key);

    my $req_token = new WebKDC::RequestToken;
    $req_token->set_return_url("http://foo.bar.com/");
    $req_token->set_creation_time(time());
    $req_token->set_request_reason('na');
    $req_token->set_req_token_type('id');
    $req_token->set_subject_auth('krb5');

    print $req_token;

    my $req_token_str = $req_token->to_b64token($key);

    my $req = new WebKDC::LoginRequest;

    $req->set_user("schemers/test");
    $req->set_pass("testing");
    $req->set_request_token($req_token_str);
    $req->set_service_token($service_token_str);

    my $resp = WebKDC::process_login_request($req);

    my $resp_token = new WebKDC::ResponseToken($resp->get_response_token(), 
					       $key, $WebKDC::C_TOKEN_TTL, 1);

    print $resp_token;

    if (!$resp_token->is_ok()) {
	die "resp_token not ok";
    }

    my $id_token = new WebKDC::IdToken($resp_token->get_req_token(),
				       $key, $WebKDC::C_TOKEN_TTL);
    print $id_token;

    my $sad = $id_token->get_subject_auth_data();

    my $id_princ = WebAuth::krb5_rd_req(WebAuth::krb5_new(), $sad, 
				     $CONFIG_WAS_KEYTAB);
    print "id = $id_princ\n";
};

if ($@) {
    print "OOOPS $@\n";
}
