------------------------------------------------------------
Build everything first
------------------------------------------------------------

I use a configure script this on my linux box, you'll need to make
sure openssl and curl are installed as well. You might need
--with-curl=... too if it isn't found by configure.

  $ cd {your-webauth-root}
  $ autoconf && autoheader
  $ ./configure --with-apache=/usr/local/apache2 \
          --with-krb5=/usr/local --with-openssl=/usr/local
  # this should make libwebauth and the apache modules
  $ make

  # you need to manually build the perl module for now
  $ cd src/bindings/perl/WebAuth/
  $ perl Makefile.PL
  $ make
  # normal gotchas with chroot apply when installing
  $ make install

  # cd back to src/libwebauth and install where your apache
  # module and the perl module can find libwebauth.so*
  # normal gotchas with chroot apply when install
  $ cd src/libwebauth
  $ make install

------------------------------------------------------------
configuring/setting up webkdc
------------------------------------------------------------

1. need to do a make install for the module

  $cd src/modules/webkdc
  $make install

2. add apache directives for the webkdc:

LoadModule webkdc_module modules/mod_webkdc.so
WebKdcServiceTokenLifetime 30d
WebKdcKeyring conf/webkdc/keyring
WebKdcKeytab conf/webkdc/keytab
WebKdcTokenAcl conf/webkdc/token.acl
WebKdcDebug on

ScriptAlias /login "/usr/local/apache2/htdocs/webkdc/login.cgi"

<Directory "/usr/local/apache2/htdocs/webkdc">
    Options Indexes FollowSymLinks +ExecCGI
    AddHandler cgi-script .cgi
    AllowOverride All
    Order allow,deny
    Allow from all
</Directory>

3. Inside the <VirtualHost> directive for the SSL connection you need
   to add the SetHandler for the webkdc:

<VirtualHost _default_:8443>
...
<Location /webkdc-service>
   SetHandler webkdc
</Location>
...
</VirtualHost>

Note we'll need to run the webkdc-service on a different port other then
the normal https port.

4. need to make the the conf/webkdc directory and the webkdc htdocs
   directory

  $ cd {your-apache-root}
  $ mkdir conf/webkdc
  $ mkdir htdocs/webkdc

5. install the webkdc files

  $ cd {your-webauth3-build}
  $ cd src/webkdc
  $ cp -r login.cgi quad.gif WebKDC.pm WebKDC {your-apache-root}/htdocs/webkdc

6. edit {your-apache-root}/htdocs/WebKDC.pm and change
   $C_WEBKDC_KEYRING_PATH and $C_WEBKDC_URL to point to your install:

our $C_WEBKDC_KEYRING_PATH = "{your-apache-chroot}/conf/webkdc/keyring";
our $C_WEBKDC_URL = 
            "https://{your-dev-machine}.stanford.edu:8443/webkdc-service/";

7. you need to install a keytab in apache conf/webkdc/keytab:

  $ cp keytab {your-apache-root}/conf/webkdc/keytab

  For now this could be webauth/{your-webkdc}.stanford.edu

  You'll need to use the same principal name when configuring the 
  WebAuth module.

8. need to create token.acl in apache/conf/webkdc/keytab:

 $ cp {your-webauth3-build}/src/modules/webkdc/token.acl \
     {your-apache-root}/conf/webkdc/token.acl

------------------------------------------------------------
configuring/setting up webauth
------------------------------------------------------------

1. need to do a make install for the module

  $ cd src/modules/webauth
  $ make install

2. add apache directives for webauth:

LoadModule webauth_module modules/mod_webauth.so

WebAuthKeyringAutoUpdate on
WebAuthKeyringKeyLifetime 30d

WebAuthLoginURL "https://{your-webkdc}.stanford.edu/login/"
WebAuthWebKdcURL "https://{your-webkdc}.stanford.edu:8443/webkdc-service/"
WebAuthWebKdcPrincipal webauth/{your-webkdc}.stanford.edu
WebAuthKeyring conf/webauth/keyring
WebAuthKeytab conf/webauth/keytab
WebAuthServiceTokenCache conf/webauth/service_token.cache
WebAuthDebug on

3. need to make the the conf/webauth directory:
   directory

  $ cd {your-apache-root}
  $ mkdir conf/webauth

4. you need to install a keytab in apache conf/webauth/keytab:

  $ cp keytab {your-apache-root}/conf/webauth/keytab
  $ mkdir conf/webkdc

  For now this could be webauth/{your-dev-machine}.stanford.edu

5. need to serve out a webauth-protected page

I've been using:

<Location /realapp/logout.cgi>
    WebAuthDoLogout on
</Location>

<Directory "/usr/local/apache2/htdocs/realapp/">
    Options Indexes FollowSymLinks ExecCGI
    AllowOverride All
    Order allow,deny
    Allow from all
    AuthType WebAuth
    require valid-user
</Directory>

where htdocs/realapp/logout.cgi is:

#!/usr/pubsw/bin/perl5
##
##  printenv -- demo CGI program which just prints its environment
##
print "Content-type: text/plain\n\n";

print "LOGGED OUT!\n";

and htdocs/realapp/dumpenv.cgi is:

#!/usr/pubsw/bin/perl5
##
##  printenv -- demo CGI program which just prints its environment
##
print "Content-type: text/plain\n\n";

foreach $var (sort(keys(%ENV))) {
    $val = $ENV{$var};
    $val =~ s|\n|\\n|g;
    $val =~ s|"|\\"|g;
    print "${var}=\"${val}\"\n";
}

Then you need to go to:

https://{your-webauth}.stanford.edu/realapp/dumpenv.cgi

to get webauth'd. And:

https://{your-webauth}.stanford.edu/realapp/logout.cgi

to try logging out.

