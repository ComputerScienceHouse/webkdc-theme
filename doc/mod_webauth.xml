<?xml version="1.0"?>
<!DOCTYPE modulesynopsis SYSTEM "../style/modulesynopsis.dtd">
<?xml-stylesheet type="text/xsl" href="../style/manual.en.xsl"?>
<modulesynopsis>

<name>mod_webauth</name>
<description>Support for the WebAuth V3 protocol</description>
<status>Contributed</status>
<sourcefile>mod_webauth.c and friends</sourcefile>
<identifier>webauth_module</identifier>

<summary>
<p>This module provides WebAuth V3 support. FIXME: BLAH BLAH BLAH.</p>

<p>Further details are provided in the 
<a href="http://webauthv3.stanford.edu/">WebAuthV3 documentation</a>.</p>

</summary>

<section><title>Using WebAuth Authentication</title>

    <p>Using WebAuth authentication is very simple. Simply set
    up authentication normally, using "AuthType WebAuth"
    instead of the normal "AuthType Basic", plus a "require valid-user"
    directive.
    </p>
<example><title>Example</title>
  &lt;Location /private/&gt;<br />
  AuthType WebAuth<br />
  Require valid-user<br />
  &lt;/Location&gt;
</example>

</section>

<section><title>Minimal Config File</title>

    <p>The following example shows the minimum config file required
    to configure and use mod_webauth.</p>

<example><title>Example</title>
  LoadModule webauth_module modules/mod_webauth.so<br/>
<br/>
  WebAuthKeyring conf/webauth_keyring<br/>
  WebAuthKeytab conf/webauth_keytab<br/>
  WebAuthServiceTokenCache conf/service_token_cache<br/>
  WebAuthLoginURL https://webkdc/login/<br/>
  WebAuthWebKDCURL https://webkdc/webkdc-service/<br/>
  WebAuthWebKDCPrincipal   service/webkdc<br/>
<br/>
  &lt;Location /private/&gt;<br />
  AuthType WebAuth<br />
  Require valid-user<br />
  &lt;/Location&gt;<br/>
</example>

</section>

<section><title>Environment Variables</title>

<p>This module provides some information as additional environment
variables to the SSI and CGI namespace. The generated variables are listed in
the table below. For CGI apps that have expectations about and/or restrictions
on the names of environment variables they can handle, you can use the
<a href="#WebAuthVarPrefix">WebAuthVarPrefix</a> directive to have 
additional environment variables set.
</p>

<table border="1">
<tr>
 <th>Variable Name:</th>
 <th>Description:</th>
</tr>
<tr><td><code>WEBAUTH_USER</code></td>            
    <td>Name of the WebAuth authenticated user</td></tr>

<tr><td><code>WEBAUTH_TOKEN_CREATION</code></td>     
     <td>When the token was created</td></tr>

<tr><td><code>WEBAUTH_TOKEN_EXPIRATION</code></td> 
<td>When the token will expire. Note: if
<a href="#WebAuthInactiveExpire">WebAuthInactiveExpire</a>
is set then the token may expire sooner due to inactivity.
</td></tr>
<tr><td><code>WEBAUTH_TOKEN_LASTUSED</code></td> 
<td>When the token was last used. Only available if 
<a href="#WebAuthLastUseUpdateInterval">WebAuthLastUseUpdateInterval</a>
 is non-zero</td></tr>

<tr><td><code>REMOTE_USER</code></td>
 <td>Name of the WebAuth authenticated user</td></tr>

<tr><td><code>AUTH_TYPE</code></td>
<td>Will be set to <code>WebAuth</code></td></tr>

</table>

<example><title>Example</title>
REMOTE_USER=schemers<br/>
AUTH_TYPE=WebAuth<br/>
WEBAUTH_USER=schemers<br/>
WEBAUTH_TOKEN_CREATION=103872393<br/>
WEBAUTH_TOKEN_EXPIRATION=1038759389<br/>
WEBAUTH_TOKEN_LASTUSED=103872393<br/>
</example>

</section>


<directivesynopsis>
<name>WebAuthSubjectAuthType</name>
<description>Type of subject authenticator the WebKDC will use in the returned
id-token</description>
<syntax>WebAuthSubjectAuthType <em>type</em></syntax>
<default>WebAuthSubjectAuthType webkdc</default>
<contextlist><context>server config</context>
<context>virtual host</context></contextlist>

<usage>
<p>
When mod_webauth needs to make a request for an id-token, it needs to
specify what type of subect authenticator that it expects returned. This
directive configures which type of subject authenticator is requested
by <em>type</em>:</p>
<ul>
<li><code>krb5</code>
    <p>
    When this type of subject authenticator is used, the WebKDC will use
    the user's Kerberos V5 credentials to make a <code>krb5_mk_req</code>
    call, using the requesting web server's Kerberos V5 principal. When
    mod_webauth gets back the id-token, it will then use it's keytab to
    verify the subject authenticator using <code>krb5_rd_req</code>.</p>
    <p>This basically means that even if the WebKDC is compromised, a
    user's identity cannot be forged, unless that user happens to be logged
    in and using the WebKDC.</p>
    <p>The downside to using this option is that returned id-token will
    be about 500 bytes longer then when using a type of <code>webkdc</code>.</p>
    <p>
    Specifying this also requires that 
    <a href="#WebAuthKeytab">WebAuthKeytab</a> be set.
    (FIXME: it is already always required for obtaining a service-token, though
     it will probably become optional at some point).</p>
</li>
<li><code>webkdc</code>
    <p>
    This is the default.</p>
    <p>
    When this type of subject authenticator is used, the WebKDC will
    place the already verified username in the returned id-token (encrypted,
    of course). When mod_webauth gets back the id-token, it will trust that
    the WebKDC as sufficiently authenticated the user, and use the returned
    username.</p>
 </li>
</ul>
<example><title>Example</title>
WebAuthSubjectAuthType krb5
</example>
</usage>
</directivesynopsis>


<directivesynopsis>
<name><a name="WebauthTokenMaxTTL">WebAuthTokenMaxTTL</a></name>
<description>How old a token that was should be recently created is valid for.
</description>
<syntax>WebAuthTokenMaxTTL <em>nnnn[s|m|h|d|w]</em></syntax>
<default>WebAuthTokenMaxTTL 300s</default>
<contextlist><context>server config</context>
<context>virtual host</context></contextlist>

<usage>
<p>
This directive sets how old tokens that must be considered recent can be 
before they are considered stale. It is used to help prevent tokens from 
being replayed, and to ignore those token if they occur in cookies, URLs, 
etc. This requires clocks between the web server and the WebKDC to be 
synchronized. </p>

<p>The units for the TTL are specified by appending a single letter,
which can either be s, m, h, d, or w, which correspond to seconds, minutes,
hours, days, and weeks respectively.</p>

<example><title>Example</title>
# ten minute TTL<br/>
WebAuthTokenMaxTTL 10m
</example>
</usage>
</directivesynopsis>

<directivesynopsis>
<name><a name="WebAuthExtraRedirect">WebAuthExtraRedirect</a></name>
<description>Whether or not to do an extra redirect upon return from the WebKDC
</description>
<syntax>WebAuthExtraRedirect on|off</syntax>
<default>WebAuthExtraRedirect on</default>
<contextlist><context>server config</context>
<context>virtual host</context></contextlist>

<usage>
<p>
When browsers get redirected back from the WebKDC, tokens will be
returned in the URL, by appending the string "<code>;WEBAUTHR=...;;WEBAUTHS=...;</code>"
to the URL.</p>

<p>This directive controls whether or not an extra redirect will be sent
to the browser, with this information removed from the URL after the
user has been authenticated. The benefit of performing the extra redirect
is the user's won't see the extra WebAuth information in the URL, and
won't be able to bookmark it, etc. Note that bookmarking a URL
with the extra information shouldn't really cause any problems, as
the tokens in the extra information will only be valid for a limited
amount of time (see <a href="#WebAuthTokenMaxTTL">WebAuthTokenMaxTTL</a>), 
after which they will be ignored.
</p>

<p>The downside to enabling this directive is the extra redirect will
require another round-trip from the server to the user's browser, and
under certain circumstances maybe also trigger a caching bug in the
user's browser (though hopefully this should never happen).</p>

<example><title>Example</title>
&lt;VirtualHost _default_:443&gt;<br />
WebAuthExtraRedirect on<br />
...<br />
&lt;/VirtualHost&gt;
</example>
</usage>
</directivesynopsis>

<directivesynopsis>
<name>WebAuthWebKDCURL</name>
<description>The URL used to contact the WebKDC when posting XML.
</description>
<syntax>WebAuthWebKDCURL <em>url</em></syntax>
<default>(none)</default>
<contextlist><context>server config</context>
<context>virtual host</context></contextlist>

<usage>
<p>
This is the URL used to post XML requests to the WebKDC, and
should use always SSL. </p>

<note><title>Note</title> 
    <p>This directive must be set.</p>
</note>

<example><title>Example</title>
WebAuthWebKDCURL https://webkdc.stanford.edu/webkdc-service/
</example>
</usage>
</directivesynopsis>

<directivesynopsis>
<name>WebAuthWebKDCPrincipal</name>
<description>The Kerberos V5 principal name of the WebKDC
</description>
<syntax>WebAuthWebKDCPrincipal <em>principal</em></syntax>
<default>(none)</default>
<contextlist><context>server config</context>
<context>virtual host</context></contextlist>

<usage>
<p>
This is the name of the Kerberos V5 Principal to use when communicating with
the WebKDC. It used to request a service-token from the WebKDC. </p>

<note><title>Note</title> 
    <p>This directive must be set.</p>
</note>

<example><title>Example</title>
# if realm isn't specified, the default realm will be used<br/>
WebAuthWebKDCPrincipal service/webkdc@stanford.edu
</example>
</usage>
</directivesynopsis>


<directivesynopsis>
<name>WebAuthLoginURL</name>
<description>The URL browsers get redirected to when the user is 
unauthenticated
</description>
<syntax>WebAuthLoginURL <em>url</em></syntax>
<default>(none)</default>
<contextlist><context>server config</context>
<context>virtual host</context></contextlist>

<usage>
<p>
This is the URL browsers get redirected to when the user is unauthenticated
and needs to either login or reuse an existing single-sign-on credential.
This should alway use SSL. </p>

<note><title>Note</title> 
    <p>This directive must be set.</p>
</note>

<example><title>Example</title>
WebAuthLoginURL https://webkdc.stanford.edu/login/
</example>
</usage>
</directivesynopsis>



<directivesynopsis>
<name>WebAuthFailureURL</name>
<description>The URL browsers get redirected to when a fatal mod_webauth
error occurs
</description>
<syntax>WebAuthFaliureURL <em>url</em></syntax>
<default>(none)</default>
<contextlist>
<context>directory</context></contextlist>

<usage>
<p>
This is the URL browsers get redirected to when mod_webauth encounters
a fatal error. If it is not set, then the server will return a
"500 Internal Server Error" when a fatal error occurs.
</p>

<example><title>Example</title>
WebAuthFailureURL /app/sorry.html
</example>
</usage>
</directivesynopsis>


<directivesynopsis>
<name>WebAuthKeyring</name>
<description>Name of the file containing the webauth keyring
</description>
<syntax>WebAuthKeyring <em>path</em></syntax>
<default>(none)</default>
<contextlist><context>server config</context>
<context>virtual host</context></contextlist>

<usage>
<p>
This is the name of the file containing the webauth keyring, which is
a file that contains the server's private AES key(s). </p>

<p>The keyring file gets read once per child and cached for the duration
of a child.
</p>

<p>If the path
is not absolute, then it will be treated as being relative to <code>ServerRoot</code>.</p>

<note><title>Note</title> 
    <p>This directive must be set.</p>
</note>

<example><title>Example</title>
WebAuthKeyRing conf/webauth_keyring
</example>
</usage>
</directivesynopsis>

<directivesynopsis>
<name><a name="WebAuthKeytab">WebAuthKeytab</a></name>
<description>Name of the Kerberos V5 keytab file
</description>
<syntax>WebAuthKeytab <em>path</em></syntax>
<default>(none)</default>
<contextlist><context>server config</context>
<context>virtual host</context></contextlist>

<usage>
<p>
This is the name of the Kerberos V5 keytab file. The keytab must only contain
the principal used for webauth operations, such as webauth/hostname@realm.
This is because the principal is determined by reading the keytab file and 
using the first principal found.</p>

<p>If the path
is not absolute, then it will be treated as being relative to <code>ServerRoot</code>.</p>

<note><title>Note</title> 
    <p>This directive must be set.</p>
</note>

<example><title>Example</title>
WebAuthKeytab conf/webauth_keytab
</example>
</usage>
</directivesynopsis>

<directivesynopsis>
<name>WebAuthServiceTokenCache</name>
<description>Name of the service-token cache file.
</description>
<syntax>WebAuthServiceTokenCache <em>path</em></syntax>
<default>(none)</default>
<contextlist><context>server config</context>
<context>virtual host</context></contextlist>

<usage>
<p>
This is the name of the service-token cache file. This file is used to
maintain a cached copy of the service-token that gets shared between
all the web server's child processes. It will get generated
and maintained automatically.
</p>

<p>If the path
is not absolute, then it will be treated as being relative to <code>ServerRoot</code>.</p>

<note><title>Note</title> 
    <p>This directive must be set.</p>
</note>


<example><title>Example</title>
WebAuthServiceTokenCache conf/service_token_cache
</example>
</usage>
</directivesynopsis>

<directivesynopsis>
<name>WebAuthAppTokenLifetime</name>
<description>Lifetime of app-tokens we create.
</description>
<syntax>WebAuthAppTokenLifetime <em>nnnn[s|m|h|d|w]</em></syntax>
<default>(lifetime of id-token returned from WebKDC)</default>
<contextlist>
<context>directory</context></contextlist>

<usage>
<p>
This directive controls how long the app-token (the main cookie containing
a user's authenticated identity) is valid for. If not specified, the
expiration time in the id-token returned from the WebKDC is used, which
is the recommended configuration.
</p>

<p> To be effective, this directive should be used with the 
<a href="#WebAuthForceLogin">WebAuthForceLogin</a>
directive, otherwise single-sign-on 
will automatically log the user back in when the token expires.
</p>

<p>The units for the time are specified by appending a single letter,
which can either be s, m, h, d, or w, which correspond to seconds, minutes,
hours, days, and weeks respectively.</p>

<example><title>Example</title>
# create an app-token valid for 2 hours<br/>
WebAuthAppTokenLifetime 2h
</example>
</usage>
</directivesynopsis>


<directivesynopsis>
<name>WebAuthReturnURL</name>
<description>URL to return to after authenticating
</description>
<syntax>WebAuthReturnURL <em>url</em></syntax>
<default>(url user originally requested)</default>
<contextlist>
<context>directory</context></contextlist>

<usage>
<p>
This directive controls which URL the user is returned to after authenicating
with the WebKDC. By default, they will return the URL they originally
requested.
</p>

<example><title>Example</title>
# if unauthenticated when accessing a URL, authenticate<br/>
# and return to front-page<br/>
WebAuthReturnURL /myapp/
</example>
</usage>
</directivesynopsis>

<directivesynopsis>
<name>WebAuthLoginCanceledURL</name>
<description>URL to return to if user cancels out of login
</description>
<syntax>WebAuthLoginCanceledURL <em>url</em></syntax>
<default>(none)</default>
<contextlist>
<context>directory</context></contextlist>

<usage>
<p>
This directive controls which URL the user is returned to if they
have to login, but hit the cancel button while logging in. 
</p>
<p>If this directive is not set and the user hits the cancel button,
they will be taken to a standard "login canceled" page at the WebKDC.
</p>

<example><title>Example</title>
WebAuthLoginCanceledURL /nonwebauth/info.html
</example>
</usage>
</directivesynopsis>

<directivesynopsis>
<name><a name="WebAuthVarPrefix">WebAuthVarPrefix</a></name>
<description>Additional webauth-related environment variables to set
</description>
<syntax>WebAuthVarPrefix <em>string</em></syntax>
<default>WebAuthVarPrefix ""</default>
<contextlist><context>server config</context>
<context>virtual host</context></contextlist>

<usage>
<p>
The webauth module sets various environment variables that are made 
available at the time of document or application serving. They are 
all prefixed by "WEBAUTH" (for instance WEBAUTH_USER), but some CGI apps 
(specifically the Oracle WRB) have expectations about and/or restrictions 
on the names of environment variables they can handle. Set this to a string
 you want prepended to the environment variables this 
module defines, and they will be set in addition to the standard "WEBAUTH" 
ones.</p>

<example><title>Example</title>
# this will cause both WEBAUTH_USER and HTTP_WEBAUTH_USER <br/>
# environment variables to get set.<br/>
WebAuthVarPrefix HTTP_
</example>
</usage>
</directivesynopsis>

<directivesynopsis>
<name>WebAuthDoLogout</name>
<description>Destroy all WebAuth-related cookies
</description>
<syntax>WebAuthDoLogout on|off</syntax>
<default>WebAuthDoLogout off</default>
<contextlist>
<context>directory</context></contextlist>

<usage>
<p>
This directive controls whether or not all WebAuth-related cookies
are removed if the user accesses this URL.
</p>

<example><title>Example</title>
  &lt;Location /myapp/logout&gt;<br />
  WebAuthDoLogout on<br />
  &lt;/Location&gt;
</example>
</usage>
</directivesynopsis>


<directivesynopsis>
<name><a name="WebAuthInactiveExpire">WebAuthInactiveExpire</a></name>
<description>Expires app-tokens that haven't been used recently
</description>
<syntax>WebAuthInactiveExpire <em>nnnn[s|m|h|d|w]</em></syntax>
<default>(disabled)</default>
<contextlist>
<context>directory</context></contextlist>

<usage>
<p>
    Duration of inactivity allowed before an app-token (webauth_at cookie)
    is considered expired and re-auth occurs. Setting this requires 
    mod_webauth to periodically update the webauth_at cookie, based on the
    setting of the 
  <a href="#WebAuthLastUseUpdateInterval">WebAuthLastUseUpdateInterval</a>
  directive.
</p>

<p> To be effective, this directive should be used with the 
<a href="#WebAuthForceLogin">WebAuthForceLogin</a>
directive, otherwise single-sign-on will automatically log the
user back in when the token expires due to inactivity. Additionally, 
this value should be higher then the value of 
  <a href="#WebAuthLastUseUpdateInterval">WebAuthLastUseUpdateInterval</a>,
otherwise the cookie will expire before the last-used-time is updated.
</p>

<p>The units for the time are specified by appending a single letter,
which can either be s, m, h, d, or w, which correspond to seconds, minutes,
hours, days, and weeks respectively.</p>

<example><title>Example</title>
# timeout an app-token if it isn't used for more <br/>
# then 20 minutes<br/>
WebAuthInactiveExpire 20m<br/>
# update the last-used-time in the cookie if its older<br/>
# then 10 minutes<br/>
WebAuthLastUseUpdateInterval 10m
</example>
</usage>
</directivesynopsis>


<directivesynopsis>
<name>
<a name="WebAuthLastUseUpdateInterval">WebAuthLastUseUpdateInterval</a>
</name>
<description>How often to update the main webauth cookie
</description>
<syntax>WebAuthLastUseUpdateInterval <em>nnnn[s|m|h|d|w]</em></syntax>
<default>WebAuthLastUsedUpdateInterval 0</default>
<contextlist>
<context>directory</context></contextlist>

<usage>
<p>
    This value determines how often we update the webauth_at cookie
    to indicate when the token was last used. Setting this too small
    will cause too many cookie updates.  A value of 0 will disable
    updating of the cookie.
</p>

<p> This directive is normally only used with 
   <a href="#WebAuthInactiveExpire">WebAuthInactiveExpire</a>, though
it can be used independently if you just need the <code>WEBAUTH_TOKEN_LASTUSED</code> 
 environment variable updated.
</p>

<p>The units for the time are specified by appending a single letter,
which can either be s, m, h, d, or w, which correspond to seconds, minutes,
hours, days, and weeks respectively.</p>

<note><title>Note</title> 
    <p>Should we enforce a minimum value, like 1m or 5m?
    </p>
</note>

<example><title>Example</title>
# timeout an app-token if it isn't used for <br/>
# more then 20 minutes<br/>
WebAuthInactiveExpire 20m<br/>
# update the last-used-time in the cookie if its older<br/>
# then 10 minutes<br/>
WebAuthLastUseUpdateInterval 10m
</example>
</usage>
</directivesynopsis>

<directivesynopsis>
<name><a name="WebAuthForceLogin">WebAuthForceLogin</a></name>
<description>Forces username/password prompt when user is not authenticated
</description>
<syntax>WebAuthForceLogin on|off</syntax>
<default>WebAuthForceLogin off</default>
<contextlist>
<context>directory</context></contextlist>

<usage>
<p>
This directive controls whether or not a user will be prompted for a
username/password if they need to be redirected to the WebKDC for
authentication.
</p>

<example><title>Example</title>
  # force the user to login, and create an app-token<br/>
  # that only lasts for 20 minutes<br/>
  &lt;Location /myapp/&gt;<br/>
  AuthType WebAuth<br/>
  Require valid-user<br/>
  WebAuthForceLogin on<br/>
  WebAuthAppTokenLifetime 20m<br/>
  &lt;/Location&gt;
</example>
</usage>
</directivesynopsis>


<directivesynopsis>
<name>WebAuthDebug</name>
<description>Turn on extra debugging in Apache error_log
</description>
<syntax>WebAuthDebug on|off</syntax>
<default>WebAuthDebug off</default>
<contextlist><context>server config</context>
<context>virtual host</context></contextlist>

<usage>
<p>
Whether or not we do extra debugging in error_log.
</p>

<example><title>Example</title>
WebAuthDebug on<br />
</example>
</usage>
</directivesynopsis>

</modulesynopsis>
