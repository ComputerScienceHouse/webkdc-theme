<?xml version="1.0"?>
<!DOCTYPE modulesynopsis SYSTEM "../style/modulesynopsis.dtd">
<?xml-stylesheet type="text/xsl" href="../style/manual.en.xsl"?>
<modulesynopsis>

<name>mod_webauth</name>
<description>Support for the WebAuth V3 protocol</description>
<status>Contributed</status>
<sourcefile>mod_webauth.c</sourcefile>
<identifier>webauth_module</identifier>

<summary>
<p>This module provides WebAuth V3 support.</p>

<p>Further details are provided in the 
<a href="http://webauthv3.stanford.edu/">WebAuthV3 documentation</a>.</p>

</summary>

<section><title>Using WebAuth Authentication</title>

    <p>Using WebAuth authentication is very simple. Simply set
    up authentication normally, using "AuthType WebAuth"
    instead of the normal "AuthType Basic", plus a "require valid-user"
    directive.
    </p>
<example><title>Example</title>
  &lt;Location /private/&gt;<br />
  AuthType WebAuth<br />
  Require valid-user<br />
  &lt;/Location&gt;
</example>

</section>

<section><title>Minimal Config File</title>

    <p>The following example shows the minimum config file required
    to configure and use mod_webauth.</p>

<example><title>Example</title>
  LoadModule webauth_module modules/mod_webauth.so<br/>
<br/>
  WebAuthKeyring conf/webauth/keyring<br/>
  WebAuthKeytab conf/webauth/keytab<br/>
  WebAuthServiceTokenCache conf/webauth/service_token_cache<br/>
  WebAuthLoginURL https://webkdc/login/<br/>
  WebAuthWebKdcURL https://webkdc/webkdc-service/<br/>
  WebAuthWebKdcPrincipal   service/webkdc<br/>
<br/>
  &lt;Location /private/&gt;<br />
  AuthType WebAuth<br />
  Require valid-user<br />
  &lt;/Location&gt;<br/>
</example>

</section>

<section><title><a name="sectionenv">Environment Variables</a></title>

<p>This module provides some information as additional environment
variables to the SSI and CGI namespace. The generated variables are listed in
the table below. For CGI apps that have expectations about and/or restrictions
on the names of environment variables they can handle, you can use the
<a href="#webauthvarprefix">WebAuthVarPrefix</a> directive to have 
additional environment variables set.
</p>
<p>Additionally, requesting credentials for a particular request may
cause environment variables to get set. For example, request Kerberos V5
credentials will result in the KRB5CCNAME environment variable being
set.
</p>
<table border="1">
<tr>
 <th>Variable Name:</th>
 <th>Description:</th>
</tr>
<tr><td><code>WEBAUTH_USER</code></td>            
    <td>Name of the WebAuth authenticated user</td></tr>

<tr><td><code>WEBAUTH_TOKEN_CREATION</code></td>     
     <td>When the token was created</td></tr>

<tr><td><code>WEBAUTH_TOKEN_EXPIRATION</code></td> 
<td>When the token will expire. Note: if
<a href="#webauthinactiveexpire">WebAuthInactiveExpire</a>
is set then the token may expire sooner due to inactivity.
</td></tr>
<tr><td><code>WEBAUTH_TOKEN_LASTUSED</code></td> 
<td>When the token was last used. Only available if 
<a href="#webauthlastuseupdateinterval">WebAuthLastUseUpdateInterval</a>
 is non-zero</td></tr>

<tr><td><code>REMOTE_USER</code></td>
 <td>Name of the WebAuth authenticated user</td></tr>

<tr><td><code>AUTH_TYPE</code></td>
<td>Will be set to <code>WebAuth</code></td></tr>

</table>

<example><title>Example</title>
REMOTE_USER=schemers<br/>
AUTH_TYPE=WebAuth<br/>
WEBAUTH_USER=schemers<br/>
WEBAUTH_TOKEN_CREATION=103872393<br/>
WEBAUTH_TOKEN_EXPIRATION=1038759389<br/>
WEBAUTH_TOKEN_LASTUSED=103872393<br/>
</example>

<p>
When checking for the authenticated username, using WEBAUTH_USER
is preferred over REMOTE_USER. This is because WEBAUTH_USER
will only ever get set by mod_webauth, while REMOTE_USER could potentially
get set by another Apache module, depending on how Apache server has
been configured. To safely use REMOTE_USER, you should also check AUTH_TYPE
to make sure that it is set to WebAuth. 
</p>
</section>

<section><title>Using WebAuth with Proxy Servers</title>

<p>Note that this option should only be used as a last resort when the target
server is unable to directly run <code>mod_webauth</code>. 
HTTP headers are not secure and can easily be forged. The target server should
only accept connections from the proxy server running 
<code>mod_webauth</code>.</p>

<p>In order to use WebAuth V3 with a proxy (ProxyPass in particular), we
recommend using 
<a href="http://httpd.apache.org/docs-2.0/mod/mod_headers.html">mod_headers</a>
to set extra headers based on the values of <code>WEBAUTH_</code> environment variables.</p>

<p>For example, lets say you want to pass <code>WEBAUTH_USER</code> through
to a proxy server. Assuming you've loaded <code>mod_headers</code> and can therefore use the <code>RequestHeader</code> directive, you could do the following:  </p>

<example><title>Example</title>
  &lt;Location /someplace><br/>
    AuthType WebAuth<br/>
    require valid-user<br/>
    ProxyPass http://otherhost.stanford.edu/<br/>
    ProxyPassReverse http://otherhost.stanford.edu/<br/>
    RequestHeader set "X-WEBAUTH-USER" "%{WEBAUTH_USER}e"
  &lt;/Location><br/>
</example>

<p>The <code>RequestHeader</code> directive causes the <code>X-WEBAUTH-USER</code>
header to get set with the value of the <code>WEBAUTH_USER</code> environment variable.</p>

<note><title>Note: WebAuth Cookies and Referer Header</title> 
<code>mod_webauth</code> strips out any cookies that start with
the prefix <code>webauth_</code>, so they do not get forwarded to
the target server, it also strips out any WebAuth-related information
in the Referer header.
</note>

<note><title>Note: WebAuthDoLogout</title> 
If you are planning on using WebAuthDoLogout with your proxied server,
you should be aware that once you tell Apache to proxy a URL namespace
(like <code>/someplace/</code>), then you can't have local 
<code>Location</code> directives for URLs within that namespace,
like <code>/location/logout</code>. Instead, you'll need to create a
that script on the target server, and have it remove any cookie that
starts with <code>webauth_</code>.
</note>

</section>

<section><title>Perl Integration</title>

<p>In order to use mod_webauth with Perl, you need to first WebAuth-protect
the pages that are served by the CGI Perl scripts. For example, lets
assume that all pages under http://yourserver/private/ are to be protected:</p>

<example><title>Apache Directives Example</title>
  &lt;Location /private/&gt;<br />
  AuthType WebAuth<br />
  Require valid-user<br />
  &lt;/Location&gt;
</example>

<p>Then, in order to determine the user's identity from
the Perl script, it is simply a matter of accessing the environment
variables set by mod_webauth within your Perl script:</p>

<example><title>Perl Example</title>
<code>
<pre>

my $WEBAUTH_USER = $ENV{'WEBAUTH_USER'};
print "The authenticated user is $WEBAUTH_USER\n";
</pre>
</code>
</example>

<p>
Any of the environment variables described in the 
<a href="#sectionenv">environment variables</a> section may be accessed this way.

</p>
</section>

<section><title>PHP 4.x Integration</title>

<p>Using mod_webauth with PHP is very similar to using it from Perl.
You need to first WebAuth-protect the pages that are served by the PHP scripts.
For example:</p>

<example><title>Apache Directives Example</title>
  &lt;Location /private/&gt;<br />
  AuthType WebAuth<br />
  Require valid-user<br />
  &lt;/Location&gt;
</example>

<p>Then, in order to determine the user's identity from
the PHP script, you can either use the PHP getenv function, or access
the special <code>$_SERVER</code> array variable. For example:</p>

<example><title>PHP Example</title>
<code>
<pre>

$WEBAUTH_USER = getenv('WEBAUTH_USER');

# alternative, using the $_SERVER 'superglobal' array:
# $WEBAUTH_USER = $_SERVER['WEBAUTH_USER'];

print "The authenticated user is $WEBAUTH_USER\n";

</pre>
</code>
</example>

<p>
In looking at the source for PHP 4.3, it appears that the <code>getenv</code>
is looking only in the <code>$_SERVER</code> array, so there is a one-to-one 
mapping between the two. Oddly enough, getenv isn't looking the 
<code>$_ENV</code> array. See the PHP documentation for more information
on <a href="http://www.php.net/manual/en/reserved.variables.php">predefined variables</a> in PHP.</p>
<p>
Any of the environment variables described in the 
<a href="#sectionenv">environment variables</a> section may be accessed this way.
</p>
</section>


<section><title>Java/Tomcat/mod_jk Integration</title>

<p>Using mod_webauth with mod_jk requires some additional configuration
of mod_jk in order to pass environment variables to the Java
servlet. So, in addition to WebAuth-protecting the pages served
by Tomcat, you also need to specify which environment variables
you want to pass. For example:</p>

<example><title>Apache Directives Example</title>
# WebAuth-protect /private/
&lt;Location /private/&gt;<br />
AuthType WebAuth<br />
Require valid-user<br />
&lt;/Location&gt;<br/>
<br/>
# Send everything for /private/ to worker1<br/>
JkMount /private/* worker1 <br/>
# webauth-related environment variables to pass<br/>
JkEnvVar WEBAUTH_USER "&lt;UNSET>"<br/>
JkEnvVar REMOTE_USER "&lt;UNSET>"<br/>
JkEnvVar AUTH_TYPE "&lt;UNSET>"<br/>
JkEnvVar WEBAUTH_TOKEN_CREATION "&lt;UNSET>"<br/>
JkEnvVar WEBAUTH_TOKEN_EXPIRATION "&lt;UNSET>"<br/>
</example>

<p>If all you are interested in is WEBAUTH_USER, then you
don't need to pass the other variables as well. </p>

<p>In order to determine the user's identity from
the servlet, you need to use the <code>getAttribute</code> method
on the <code>request</code> object.</p>

<example><title>JSP Example</title>
<code>
<pre>
WEBAUTH_USER is set to:
&lt;% out.print (request.getAttribute("WEBAUTH_USER")); %>
</pre>
</code>
</example>

<p>Any variables you configure mod_jk to pass via <code>JkEnvVar</code> will
end up as a request attribute as opposed to being accessible by
<code>java.lang.System.getenv</code>, which is <b>deprecated</b>.
</p>

<note><title>Note</title> 
It appears
that mod_jk requires you specify a default value for the environment
variables in the event that they are unset. A value of "" was not
allowed, so I picked the special value "&lt;UNSET>" for this example.
If all your pages are WebAuth-protected, then this default value
will never be used.
</note>

<p>You will also need to explicitly turn off Tomcat authentication in the
<code>&lt;Connector&gt;</code> definition in the Tomcat
<code>server.xml</code> file.  For example:</p>

<example><title>Connector Example</title>
<code>
<pre>
&lt;Connector className="org.apache.ajp.tomcat4.Ajp13Connector"
    port="8009" minProcessors="5" maxProcessors="75"
    tomcatAuthentication="false"
    acceptCount="10" debug="0"/&gt;
</pre>
</code>
</example>
</section>

<section><title>Requesting Credentials</title>

<p>One of the features of WebAuth is the ability to request credentials
 for a particular request (or group of requests). </p>

<p>Depending on the credential type, temporary files containing credentials
  may need to be created. These credentials will be stored in the directory
  specified by the <a href="#webauthcredcachedir">WebAuthCredCacheDir</a> directive.</p>

<p>The <a href="#webauthcred">WebAuthCred</a> directive is used to specify 
which credentials a
particular request may need. Credentials are not actually requested 
from the WebKDC until a page with the <a href="#webauthusecreds">WebAuthUseCreds</a> directive set to 
"on" is served. At that point, they will be cached (encrypted) in cookies 
and used to satisfy future requests.</p>

<p>Saving credentials on every single request (for example, an image
or static page) is expensive, since it may involve decrypting credentials
stored in a cookie, processing them, and storing them in a temporary file.
The <a href="#webauthusecreds">WebAuthUseCreds</a> directive is used to control which requests will actually
go through this process.</p>

<p>The following example shows one scenario where every page under
/myapp/ is WebAuth-protected, and every page under /myapp/commands/
requires the use of two Kerberos V5 credentials.
</p>

<example><title>Example</title>
  # this first WebAuthCred directive will cause us to<br/>
  # acquire a proxy-token on the initial redirect when<br/>
  # determining the user's identity. It saves an extra redirect<br/>
  # later on when we actually use/acquire credentials.<br/>
  <br/>
  &lt;Location /myapp/&gt;<br/>
  AuthType WebAuth<br/>
  require valid-user<br/>
  WebAuthCred krb5<br/>
  &lt;/Location&gt; <br/>
  <br/>
  # these next WebAuthCred directives will cause us to acquire<br/>
  # two credentials from the WebKDC, since WebAuthUseCreds is on.<br/>
  <br/>
  &lt;Location /myapp/commands/&gt;<br/>
  WebAuthUseCreds on<br/>
  WebAuthCred krb5 host/slapshot.stanford.edu@stanford.edu<br/>
  WebAuthCred krb5 host/lichen.stanford.edu@stanford.edu<br/>
  &lt;/Location&gt;
  <br/>
</example>

</section>

<section><title>Debugging mod_webauth</title>
<p>If you are having trouble getting <code>mod_webauth</code>
configured, you can enable the <code>webauth</code> handler and point your browser
at the configured URL to get some information on whether or not
mod_webauth is configured correctly. </p>

<note><title>Note</title> 
Just to be safe, you should probably disable the <code>webauth</code> 
handler after you have <code>mod_webauth</code> configured correctly.
</note>

<example><title>Example</title>
<pre>
  # WebAuthDebug must be on
  WebAuthDebug on
  &lt;Location /webauth-status&gt;
  SetHandler webauth
  Order allow,deny
  Allow from all
  &lt;/Location&gt; <br/>
</pre>
</example>

</section>

<section><title>Setting up load-balanced WebAuth servers</title>
<p>WebAuth V3 was designed so that it would be fairly easy
to setup multiple WebAuth servers for load balancing and redundancy. There
are two pieces of information that need to be shared between
WebAuth servers in order to achieve this:
    </p>

<ol>
  <li>Kerberos keytab file</li>
  <li>WebAuth keyring file</li>
</ol>

<note><title>Note</title> 
    <p>All the files should be securely transferred from the master
 to the slave(s) using a program like <code>scp</code> or 
kerberized <code>rcp</code>.</p>
</note>

<p>
By convention, one of the WebAuth servers should be designated as the master
and other servers should be designated as slaves. These files should
only be updated on the master and pushed manually to the slaves.
</p>

<p>The Kerberos keytab file is specified using the 
<a href="#webauthkeytab">WebAuthKeyTab</a> directive. This is a standard
Kerberos V5 keytab file containing the principal/key used by WebAuth servers
to initially communicate with the WebKDC.
</p>

<p>The WebAuth keyring file is specified using the 
<a href="#webauthkeyring">WebAuthKeyring</a> directive. This file
contains the WebAuth server's private AES key(s). If you are running
multiple WebAuth servers, you must turn off automatic updating of
the keyring file on restarts. This is done using
the <a href="#webauthkeyringautoupdate">WebAuthKeyringAutoUpdate</a>
directive:

<example><title>Turning off auto update</title>
  WebAuthKeyringAutoUpdate off<br/>
</example>

</p>

<p>Once auto update is turned off, the keyring file will not get
automatically updated and can manually be copied across all the servers.
The keys in the keyring file still need to be changed periodically,
and the <code>wa_keyring</code> command can be used to do this. This
command would be run on the keyring file on the master, at which point
it would be copied to the slaves. For example, to generate a new 
post-dated key in the file called "keyring" you should do the following:
</p>

<example><title>Generating a post-dated key</title>
  wa_keyring -f ./keyring add 7d
</example>

<p>
That example generates a new key that will be valid in seven days. Any
existing keys in the keyring file are left as-is so outstanding tokens
continue to work. The new keyring file can then safely be distributed
to the slave servers. Old keys in the keyring file should also periodically
be removed. This can manually be done with <code>wa_keyring</code> using the 
<code>list</code> and <code>remove</code> commands. For example:
</p>

<example><title>Manually remove old keys</title>
<pre>
$ wa_keyring -f ./keyring list
Path: ./keyring
id  Created            Valid after        Fingerprint
 0  02/13/2003 12:43:25  02/13/2003 12:43:25  664b48642f741ae343ef5ea46a8768e8
 1  03/12/2003 16:21:57  03/12/2003 16:21:57  7c4971e760f75525bba277a308c092c0

$ wa_keyring -f ./keyring remove 0
</pre>
</example>

<p>Or it can be done automatically, using the <code>gc</code> command:
</p>

<example><title>Automatically removing old keys</title>
<pre>
# remove any keys with a valid after date older then 90 days
$ wa_keyring -f ./keyring gc 90d
</pre>
</example>

<p>To summarize, for each WebAuth (master and slaves), you'd want the 
following directives:
</p>

<example><title>Example</title>
<pre>
WebAuthKeyring conf/webauth/keyring
WebAuthKeytab conf/webauth/keytab
WebAuthKeyringAutoUpdate off
</pre>
</example>

<p>
Periodically (once a month should be reasonable), you'd want
to generate a new key, remove old keys, and then update
the keyring file on the slaves. For example:
</p>

<example><title>Monthly Key maintenance</title>
<pre>
# generate a new key that will be valid in 2 day
$ wa_keyring -f conf/webauth/keyring add 2d
# remove keys that have been around for more then 60 days
$ wa_keyring -f conf/webauth/keyring gc 60d
# foreach slave...
$ scp conf/weauth/keyring webauth-slave:{path-on-slave}
# restart the master and all the slaves at any point before
# the new key is valid.
</pre>
</example>

</section>

<directivesynopsis>
<name>WebAuthSubjectAuthType</name>
<description>Type of subject authenticator the WebKDC will use in the returned
id-token</description>
<syntax>WebAuthSubjectAuthType <em>type</em></syntax>
<default>WebAuthSubjectAuthType webkdc</default>
<contextlist><context>server config</context>
<context>virtual host</context></contextlist>

<usage>
<p>
When mod_webauth needs to make a request for an id-token, it needs to
specify what type of subject authenticator that it expects returned. This
directive configures which type of subject authenticator is requested
by <em>type</em>:</p>
<ul>
<li><code>krb5</code>
    <p>
    When this type of subject authenticator is used, the WebKDC will use
    the user's Kerberos V5 credentials to make a <code>krb5_mk_req</code>
    call, using the requesting web server's Kerberos V5 principal. When
    mod_webauth gets back the id-token, it will then use it's keytab to
    verify the subject authenticator using <code>krb5_rd_req</code>.</p>
    <p>This basically means that even if the WebKDC is compromised, a
    user's identity cannot be forged, unless that user happens to be logged
    in and using the WebKDC.</p>
    <p>The downside to using this option is that returned id-token will
    be about 500 bytes longer then when using a type of <code>webkdc</code>.</p>
    <p>
    Specifying this also requires that 
    <a href="#webauthkeytab">WebAuthKeytab</a> be set.
    (FIXME: it is already always required for obtaining a service-token, though
     it will probably become optional at some point).</p>
</li>
<li><code>webkdc</code>
    <p>
    This is the default.</p>
    <p>
    When this type of subject authenticator is used, the WebKDC will
    place the already verified username in the returned id-token (encrypted,
    of course). When mod_webauth gets back the id-token, it will trust that
    the WebKDC as sufficiently authenticated the user, and use the returned
    username.</p>
 </li>
</ul>
<example><title>Example</title>
WebAuthSubjectAuthType krb5
</example>
</usage>
</directivesynopsis>


<directivesynopsis>
<name>WebAuthTokenMaxTTL</name>
<description>How old a token that was should be recently created is valid for.
</description>
<syntax>WebAuthTokenMaxTTL <em>nnnn[s|m|h|d|w]</em></syntax>
<default>WebAuthTokenMaxTTL 300s</default>
<contextlist><context>server config</context>
<context>virtual host</context></contextlist>

<usage>
<p>
This directive sets how old tokens that must be considered recent can be 
before they are considered stale. It is used to help prevent tokens from 
being replayed, and to ignore those token if they occur in cookies, URLs, 
etc. This requires clocks between the web server and the WebKDC to be 
synchronized. </p>

<p>The units for the TTL are specified by appending a single letter,
which can either be s, m, h, d, or w, which correspond to seconds, minutes,
hours, days, and weeks respectively.</p>

<example><title>Example</title>
# ten minute TTL<br/>
WebAuthTokenMaxTTL 10m
</example>
</usage>
</directivesynopsis>

<directivesynopsis>
<name>WebAuthExtraRedirect</name>
<description>Whether or not to do an extra redirect upon return from the WebKDC
</description>
<syntax>WebAuthExtraRedirect on|off</syntax>
<default>WebAuthExtraRedirect off</default>
<contextlist><context>directory</context><context>.htaccess</context></contextlist>

<usage>
<p>
When browsers get redirected back from the WebKDC, tokens will be
returned in the URL, by appending the string "<code>?WEBAUTHR=...;;WEBAUTHS=...;</code>"
to the URL.</p>

<p>This directive controls whether or not an extra redirect will be sent
to the browser, with this information removed from the URL after the
user has been authenticated. The benefit of performing the extra redirect
is the user's won't see the extra WebAuth information in the URL, and
won't be able to bookmark it, etc. Note that bookmarking a URL
with the extra information shouldn't really cause any problems, as
the tokens in the extra information will only be valid for a limited
amount of time (see <a href="#webauthtokenmaxttl">WebAuthTokenMaxTTL</a>), 
after which they will be ignored.
</p>

<p>The downside to enabling this directive is the extra redirect will
require another round-trip from the server to the user's browser, and
under certain circumstances maybe also trigger a caching bug in the
user's browser (though hopefully this should never happen).</p>

<example><title>Example</title>
&lt;Location /myapp/&gt;<br />
WebAuthExtraRedirect on<br />
...<br />
&lt;/Location&gt;
</example>
</usage>
</directivesynopsis>

<directivesynopsis>
<name>WebAuthWebKdcURL</name>
<description>The URL used to contact the WebKDC when posting XML.
</description>
<syntax>WebAuthWebKdcURL <em>url</em></syntax>
<default>(none)</default>
<contextlist><context>server config</context>
<context>virtual host</context></contextlist>

<usage>
<p>
This is the URL used to post XML requests to the WebKDC, and
should use always SSL. </p>

<note><title>Note</title> 
    <p>This directive must be set.</p>
</note>

<example><title>Example</title>
WebAuthWebKdcURL https://webkdc.stanford.edu/webkdc-service/
</example>
</usage>
</directivesynopsis>

<directivesynopsis>
<name>WebAuthWebKdcPrincipal</name>
<description>The Kerberos V5 principal name of the WebKDC
</description>
<syntax>WebAuthWebKdcPrincipal <em>principal</em></syntax>
<default>(none)</default>
<contextlist><context>server config</context>
<context>virtual host</context></contextlist>

<usage>
<p>
This is the name of the Kerberos V5 Principal to use when communicating with
the WebKDC. It used to request a service-token from the WebKDC. </p>

<note><title>Note</title> 
    <p>This directive must be set.</p>
</note>

<example><title>Example</title>
# if realm isn't specified, the default realm will be used<br/>
WebAuthWebKdcPrincipal service/webkdc@stanford.edu
</example>
</usage>
</directivesynopsis>


<directivesynopsis>
<name>WebAuthLoginURL</name>
<description>The URL browsers get redirected to when the user is 
unauthenticated
</description>
<syntax>WebAuthLoginURL <em>url</em></syntax>
<default>(none)</default>
<contextlist><context>server config</context>
<context>virtual host</context></contextlist>

<usage>
<p>
This is the URL browsers get redirected to when the user is unauthenticated
and needs to either login or reuse an existing single-sign-on credential.
This should alway use SSL. </p>

<note><title>Note</title> 
    <p>This directive must be set.</p>
</note>

<example><title>Example</title>
WebAuthLoginURL https://webkdc.stanford.edu/login/
</example>
</usage>
</directivesynopsis>

<directivesynopsis>
<name>WebAuthAuthType</name>
<description>Additional AuthType name to support</description>
<syntax>WebAuthAuthType <em>authtype</em></syntax>
<default>(none)</default>
<contextlist><context>server config</context>
<context>virtual host</context></contextlist>

<usage>
<p>This sets an additional <code>AuthType</code> name that will
be treated the same as <code>WebAuth</code> when used with the
<code>AuthType</code> directive.
</p>

<note><title>Note</title> 
    <p>This directive exists to help people transition from other
<code>AuthType</code> names to <code>WebAuth</code>. It is recommended
that people transition over to using only <code>WebAuth</code> as soon
as possible.</p>
    <p>Setting this directive to <code>StanfordAuth</code> and then using
<code>StanfordAuth</code> in an <code>AuthType</code> directive  will also 
cause two additional environment variables to get set: 
<code>SU_AUTH_USER</code> and <code>SU_AUTH_AGE</code>.
</p>
</note>

<example><title>Example</title>
WebAuthAuthType StanfordAuth
</example>
</usage>
</directivesynopsis>



<directivesynopsis>
<name>WebAuthFailureURL</name>
<description>The URL browsers get redirected to when a fatal mod_webauth
error occurs
</description>
<syntax>WebAuthFaliureURL <em>url</em></syntax>
<default>(none)</default>
<contextlist>
<context>directory</context></contextlist>

<usage>
<p>
This is the URL browsers get redirected to when mod_webauth encounters
a fatal error. If it is not set, then the server will return a
"500 Internal Server Error" when a fatal error occurs.
</p>

<example><title>Example</title>
WebAuthFailureURL /app/sorry.html
</example>
</usage>
</directivesynopsis>


<directivesynopsis>
<name>WebAuthKeyring</name>
<description>Name of the file containing the webauth keyring
</description>
<syntax>WebAuthKeyring <em>path</em></syntax>
<default>(none)</default>
<contextlist><context>server config</context>
<context>virtual host</context></contextlist>

<usage>
<p>
This is the name of the file containing the webauth keyring, which is
a file that contains the server's private AES key(s). </p>

<p>The keyring file gets read once per child and cached for the duration
of a child.
</p>

<p>If the path
is not absolute, then it will be treated as being relative to <code>ServerRoot</code>.</p>

<note><title>Note</title> 
    <p>This directive must be set.</p>
</note>

<example><title>Example</title>
WebAuthKeyRing conf/webauth/keyring
</example>
</usage>
</directivesynopsis>

<directivesynopsis>
<name>WebAuthKeytab</name>
<description>Name of the Kerberos V5 keytab file
</description>
<syntax>WebAuthKeytab <em>path</em> [<em>principal</em>]</syntax>
<default>(none)</default>
<contextlist><context>server config</context>
<context>virtual host</context></contextlist>

<usage>
<p>
This is the name of the Kerberos V5 keytab file. If principal is not
specified, then the first principal in the keytab file be used.</p>

<p>If the path
is not absolute, then it will be treated as being relative to <code>ServerRoot</code>.</p>

<note><title>Note</title> 
    <p>This directive must be set.</p>
</note>

<example><title>Example</title>
WebAuthKeytab conf/webauth/keytab webauth/slapshot.stanford.edu
</example>
</usage>
</directivesynopsis>

<directivesynopsis>
<name>WebAuthServiceTokenCache</name>
<description>Name of the service-token cache file.
</description>
<syntax>WebAuthServiceTokenCache <em>path</em></syntax>
<default>(none)</default>
<contextlist><context>server config</context>
<context>virtual host</context></contextlist>

<usage>
<p>
This is the name of the service-token cache file. This file is used to
maintain a cached copy of the service-token that gets shared between
all the web server's child processes. It will get generated
and maintained automatically.
</p>

<p>If the path
is not absolute, then it will be treated as being relative to <code>ServerRoot</code>.</p>

<note><title>Note</title> 
    <p>This directive must be set.</p>
</note>


<example><title>Example</title>
WebAuthServiceTokenCache conf/webauth/service_token_cache
</example>
</usage>
</directivesynopsis>

<directivesynopsis>
<name>WebAuthAppTokenLifetime</name>
<description>Lifetime of app-tokens we create.
</description>
<syntax>WebAuthAppTokenLifetime <em>nnnn[s|m|h|d|w]</em></syntax>
<default>(lifetime of id-token returned from WebKDC)</default>
<contextlist>
<context>directory</context></contextlist>

<usage>
<p>
This directive controls how long the app-token (the main cookie containing
a user's authenticated identity) is valid for. If not specified, the
expiration time in the id-token returned from the WebKDC is used, which
is the recommended configuration.
</p>

<p> To be effective, this directive should be used with the 
<a href="#webauthforcelogin">WebAuthForceLogin</a>
directive, otherwise single-sign-on 
will automatically log the user back in when the token expires.
</p>

<p>The units for the time are specified by appending a single letter,
which can either be s, m, h, d, or w, which correspond to seconds, minutes,
hours, days, and weeks respectively.</p>

<example><title>Example</title>
# create an app-token valid for 2 hours<br/>
WebAuthAppTokenLifetime 2h
</example>
</usage>
</directivesynopsis>


<directivesynopsis>
<name>WebAuthReturnURL</name>
<description>URL to return to after authenticating
</description>
<syntax>WebAuthReturnURL <em>url</em></syntax>
<default>(url user originally requested)</default>
<contextlist><context>directory</context><context>.htaccess</context></contextlist>

<usage>
<p>
This directive controls which URL the user is returned to after authenticating
with the WebKDC. By default, they will return the URL they originally
requested.
</p>

<example><title>Example</title>
# if unauthenticated when accessing a URL, authenticate<br/>
# and return to front-page<br/>
WebAuthReturnURL /myapp/
</example>
</usage>
</directivesynopsis>

<directivesynopsis>
<name>WebAuthPostReturnURL</name>
<description>URL to return to after authenticating during a POST
</description>
<syntax>WebAuthPostReturnURL <em>url</em></syntax>
<default>(none)</default>
<contextlist><context>directory</context><context>.htaccess</context></contextlist>

<usage>
<p>
This directive controls which URL the user is returned to after authenticating
with the WebKDC when the HTTP method was a POST. By default, mod_webauth
will return 401 (UNAUTHORIZED), as it is impractical to try and recover from a POST that failed due to no authentication.
</p>

<example><title>Example</title>
# if unauthenticated when accessing a URL via a POST, <br/>
# authenticate and return to front-page<br/>
WebAuthPostReturnURL /myapp/
</example>
</usage>
</directivesynopsis>

<directivesynopsis>
<name>WebAuthLoginCanceledURL</name>
<description>URL to return to if user cancels out of login
</description>
<syntax>WebAuthLoginCanceledURL <em>url</em></syntax>
<default>(none)</default>
<contextlist><context>directory</context><context>.htaccess</context></contextlist>

<usage>
<p>
This directive controls which URL the user is returned to if they
have to login, but hit the cancel button while logging in. 
</p>
<p>If this directive is not set and the user hits the cancel button,
they will be taken to a standard "login canceled" page at the WebKDC.
</p>

<example><title>Example</title>
WebAuthLoginCanceledURL /nonwebauth/info.html
</example>
</usage>
</directivesynopsis>

<directivesynopsis>
<name>WebAuthVarPrefix</name>
<description>Additional webauth-related environment variables to set
</description>
<syntax>WebAuthVarPrefix <em>string</em></syntax>
<default>WebAuthVarPrefix ""</default>
<contextlist><context>directory</context><context>.htaccess</context></contextlist>

<usage>
<p>
The webauth module sets various environment variables that are made 
available at the time of document or application serving. They are 
all prefixed by "WEBAUTH" (for instance WEBAUTH_USER), but some CGI apps 
(specifically the Oracle WRB) have expectations about and/or restrictions 
on the names of environment variables they can handle. Set this to a string
 you want prepended to the environment variables this 
module defines, and they will be set in addition to the standard "WEBAUTH" 
ones.</p>

<example><title>Example</title>
&lt;Location /myapp/&gt;<br />
# this will cause both WEBAUTH_USER and HTTP_WEBAUTH_USER <br/>
# environment variables to get set.<br/>
WebAuthVarPrefix HTTP_<br/>
&lt;/Location&gt;
</example>
</usage>
</directivesynopsis>

<directivesynopsis>
<name>WebAuthDoLogout</name>
<description>Destroy all WebAuth-related cookies
</description>
<syntax>WebAuthDoLogout on|off</syntax>
<default>WebAuthDoLogout off</default>
<contextlist>
<context>directory</context></contextlist>

<usage>
<p>
This directive controls whether or not all WebAuth-related cookies
are removed if the user accesses this URL. This directive also enables
the <a href="#webauthdontcache">WebAuthDontCache</a> directive for the
given location.</p>

<example><title>Example</title>
  &lt;Location /myapp/logout&gt;<br />
  WebAuthDoLogout on<br />
  &lt;/Location&gt;
</example>

<note><title>Note</title> 
WebAuth-related cookies are all cookis that start with
the prefix "webauth_".
</note>

</usage>
</directivesynopsis>


<directivesynopsis>
<name>WebAuthInactiveExpire</name>
<description>Expires app-tokens that haven't been used recently
</description>
<syntax>WebAuthInactiveExpire <em>nnnn[s|m|h|d|w]</em></syntax>
<default>(disabled)</default>
<contextlist>
<context>directory</context></contextlist>

<usage>
<p>
    Duration of inactivity allowed before an app-token (webauth_at cookie)
    is considered expired and re-auth occurs. Setting this requires 
    mod_webauth to periodically update the webauth_at cookie, based on the
    setting of the 
  <a href="#webauthlastuseupdateinterval">WebAuthLastUseUpdateInterval</a>
  directive.
</p>

<p> To be effective, this directive should be used with the 
<a href="#webauthforcelogin">WebAuthForceLogin</a>
directive, otherwise single-sign-on will automatically log the
user back in when the token expires due to inactivity. Additionally, 
this value should be higher then the value of 
  <a href="#webauthlastuseupdateinterval">WebAuthLastUseUpdateInterval</a>,
otherwise the cookie will expire before the last-used-time is updated.
</p>

<p>The units for the time are specified by appending a single letter,
which can either be s, m, h, d, or w, which correspond to seconds, minutes,
hours, days, and weeks respectively.</p>

<example><title>Example</title>
# timeout an app-token if it isn't used for more <br/>
# then 20 minutes<br/>
WebAuthInactiveExpire 20m<br/>
# update the last-used-time in the cookie if it's older<br/>
# then 10 minutes<br/>
WebAuthLastUseUpdateInterval 10m
</example>
</usage>
</directivesynopsis>


<directivesynopsis>
<name>WebAuthLastUseUpdateInterval</name>
<description>How often to update the main webauth cookie
</description>
<syntax>WebAuthLastUseUpdateInterval <em>nnnn[s|m|h|d|w]</em></syntax>
<default>WebAuthLastUsedUpdateInterval 0</default>
<contextlist>
<context>directory</context></contextlist>

<usage>
<p>
    This value determines how often we update the webauth_at cookie
    to indicate when the token was last used. Setting this too small
    will cause too many cookie updates.  A value of 0 will disable
    updating of the cookie.
</p>

<p> This directive is normally only used with 
   <a href="#webauthinactiveexpire">WebAuthInactiveExpire</a>, though
it can be used independently if you just need the <code>WEBAUTH_TOKEN_LASTUSED</code> 
 environment variable updated.
</p>

<p>The units for the time are specified by appending a single letter,
which can either be s, m, h, d, or w, which correspond to seconds, minutes,
hours, days, and weeks respectively.</p>

<example><title>Example</title>
# timeout an app-token if it isn't used for <br/>
# more then 20 minutes<br/>
WebAuthInactiveExpire 20m<br/>
# update the last-used-time in the cookie if it's older<br/>
# then 10 minutes<br/>
WebAuthLastUseUpdateInterval 10m
</example>
</usage>
</directivesynopsis>

<directivesynopsis>
<name>WebAuthForceLogin</name>
<description>Forces username/password prompt when user is not authenticated
</description>
<syntax>WebAuthForceLogin on|off</syntax>
<default>WebAuthForceLogin off</default>
<contextlist>
<context>directory</context></contextlist>

<usage>
<p>
This directive controls whether or not a user will be prompted for a
username/password if they need to be redirected to the WebKDC for
authentication.
</p>

<example><title>Example</title>
  # force the user to login, and create an app-token<br/>
  # that only lasts for 20 minutes<br/>
  &lt;Location /myapp/&gt;<br/>
  AuthType WebAuth<br/>
  Require valid-user<br/>
  WebAuthForceLogin on<br/>
  WebAuthAppTokenLifetime 20m<br/>
  &lt;/Location&gt;
</example>
</usage>
</directivesynopsis>


<directivesynopsis>
<name>WebAuthDebug</name>
<description>Turn on extra debugging in Apache error_log
</description>
<syntax>WebAuthDebug on|off</syntax>
<default>WebAuthDebug off</default>
<contextlist><context>server config</context>
<context>virtual host</context></contextlist>

<usage>
<p>
Whether or not to do extra debugging in error_log. You should
also set Apache's <code>LogLevel</code> to <code>debug</code> as
well.
</p>

<example><title>Example</title>
WebAuthDebug on<br />
LogLevel debug<br />
</example>
</usage>
</directivesynopsis>


<directivesynopsis>
<name>WebAuthSSLRedirect</name>
<description>Redirect to https when accessing a WebAuth-protected page via http
</description>
<syntax>WebAuthSSLRedirect on|off</syntax>
<default>WebAuthSSLRedirect off</default>
<contextlist><context>server config</context>
<context>virtual host</context></contextlist>

<usage>
<p>
If a user attempts to access a WebAuth-protected page via <code>http</code>
instead of <code>https</code> and this directive is turned off, then access 
will be denied. If this directive is tuned on, then the user will 
be redirected to the same URL using <code>https</code> instead of 
<code>http</code>. Once accessing pages using <code>https</code>, they will
remain accessing pages via <code>https</code> unless the application
redirects the user back to <code>http</code>.
</p>

<note><title>Note</title> 
    <p>If the server is not configured to run SSL on the default port, then
    the <a href="#webauthsslredirectport">WebAuthSSLRedirectPort</a> directive
    must be used to specify which port to redirect the user to.
    </p>
</note>

<example><title>Example</title>
WebAuthSSLRedirect on<br />
</example>
</usage>
</directivesynopsis>




<directivesynopsis>
<name>WebAuthSSLRedirectPort</name>
<description>port to use when redirecting the user to https
</description>
<syntax>WebAuthSSLRedirectPort <em>port</em></syntax>
<default>WebAuthSSLRedirect 443</default>
<contextlist><context>server config</context>
<context>virtual host</context></contextlist>

<usage>
<p>
This is used in conjunction with the 
<a href="#webauthsslredirect">WebAuthSSLRedirect</a> directive and controls
which port the user is redirected to when redirecting them to the 
<code>https</code> version of the URL. This is useful during development if
you run the Apache server on ports 8080 and 8443, for example.
</p>

<example><title>Example</title>
WebAuthSSLRedirect on<br />
WebAuthSSLRedirectPort 8443<br />
</example>
</usage>
</directivesynopsis>



<directivesynopsis>
<name>WebAuthDontCache</name>
<description>Turn on expire header
</description>
<syntax>WebAuthDontCache on|off</syntax>
<default>WebAuthDontCache off</default>
<contextlist><context>directory</context><context>.htaccess</context>
</contextlist>

<usage>
<p>
Setting this to <code>on</code> will cause the following headers to be 
included in the response to tell browsers not to cache the returned document.
</p>

<table border="1">
<tr>
 <th>Header Name</th>
 <th>Header Value</th>
</tr>
<tr><td><code>Expires</code></td>            
    <td>(current time)</td></tr>

<tr><td><code>Pragma</code></td>     
     <td>no-cache</td></tr>

<tr><td><code>Cache-Control</code></td> 
<td>no-cache</td></tr>
</table>

<p>
It is recommended this only be turned on for sensitive documents and not
all documents (and images) on the server. Also see
<seealso><a href="mod_expires.html.en">mod_expires</a></seealso>.
</p>




<example><title>Example</title>
WebAuthDontCache on<br />
</example>
</usage>
</directivesynopsis>

<directivesynopsis>
<name>WebAuthKeyringAutoUpdate</name>
<description>Whether or not we auto-update the keyring file 
</description>
<syntax>WebAuthKeyringAutoUpdate on|off</syntax>
<default>WebAuthKeyringAutoUpdate on</default>
<contextlist><context>server config</context>
<context>virtual host</context></contextlist>

<usage>
<p>
This directive controls whether or not we auto-update the keyring file.
This includes creating it if it doesn't exist, and generating a new
key before the old key expires, and periodically garbage collecting
old keys. Note that auto updating only occurs on server startup and restarts.
</p>

<note><title>Note</title> 
    <p>This directive should be turned off if multiple servers are
sharing the same keyring file so the keyring file can be manually updated.
That too will eventually be automated.</p>
</note>

<example><title>Example</title>
WebAuthKeyringAutoUdpate off<br />
</example>
</usage>
</directivesynopsis>


<directivesynopsis>
<name>WebAuthKeyringKeyLifetime</name>
<description>Lifetime of keys in the keyring if we auto-update
</description>
<syntax>WebAuthAKeyringKeyLifetime <em>nnnn[s|m|h|d|w]</em></syntax>
<default>WebAuthKeyringKeyLifetime 30d</default>
<contextlist><context>server config</context>
<context>virtual host</context></contextlist>

<usage>
<p>
This directive controls how long keys we automatically create for
the keyring are valid. Keys will be valid from the time they are
created until the lifetime is reached. Note that key lifetime is only
checked on server startup and restarts.
</p>

<p>This
directive is only consulted if WebKdcKeyringAutoUpdate is enabled.
</p>

<p>The units for the time are specified by appending a single letter,
which can either be s, m, h, d, or w, which correspond to seconds, minutes,
hours, days, and weeks respectively.</p>

<example><title>Example</title>
WebAuthKeyringKeyLifetime 60d<br/>
</example>
</usage>
</directivesynopsis>


<directivesynopsis>
<name>WebAuthCredCacheDir</name>
<description>Name of the directory containing cached credentials
</description>
<syntax>WebAuthCredCacheDir <em>path</em></syntax>
<default>(none)</default>
<contextlist><context>server config</context>
<context>virtual host</context></contextlist>

<usage>
<p>
This is the name of the directory where credentials are cached
for the duration of a single request. </p>

<p>If the path
is not absolute, then it will be treated as being relative to <code>ServerRoot</code>.</p>

<note><title>Note</title> 
    <p>This directive must be set if the <a href="#webauthcred">WebAuthCred</a> and <a href="#webauthusecreds">WebAuthUseCreds</a>
directives are used.</p>
</note>

<example><title>Example</title>
WebAuthCredCacheDir conf/webauth/credcache
</example>
</usage>
</directivesynopsis>



<directivesynopsis>
<name>WebAuthUseCreds</name>
<description>Whether or not save credentials to the cache
</description>
<syntax>WebAuthUseCreds on|off</syntax>
<default>WebAuthUseCreds off</default>
<contextlist>
<context>directory</context></contextlist>

<usage>
<p>
This directive controls whether or not any acquired credentials will
actually be saved to the credential cache directory and made available
as part of the current request. It should be used in conjunction with
the <a href="#webauthcred">WebAuthCred</a> directive.
</p>

<example><title>Example</title>
  &lt;Location /myapp/command&gt;<br />
  WebAuthUseCreds on<br />
  &lt;/Location&gt;
</example>
</usage>
</directivesynopsis>



<directivesynopsis>
<name>WebAuthCred</name>
<description>Which credentials to acquire
</description>
<syntax>WebAuthCred <em>type</em> [<em>service</em>]</syntax>
<default>(none)</default>
<contextlist>
<context>directory</context></contextlist>

<usage>
<p>
This directive specifies which credentials a particular request may need.
It should be used should be used in conjunction with the <a href="#webauthusecreds">WebAuthUseCreds</a> 
directive.
</p>

<p>Note that service is optional. If service is not present, then this is
used to indicate that a page further down in the hierarchy will eventually
acquire credentials of the specified type, by specifying credentials
with a service name, and setting <a href="#webauthusecreds">WebAuthUseCreds</a> to "on".</p>

<p>This directive may be used multiple times in the same location to
specify that multiple credentials are required.</p>

<example>
<title>Example</title>
  # get and use the following krb5 credential on every<br/>
  # request under /myapp/.<br/>
  &lt;Location /myapp/&gt;<br/>
  AuthType WebAuth<br/>
  require valid-user<br/>
  WebAuthCred krb5 host/slapshot.stanford.edu@stanford.edu<br/>
  &lt;/Location&gt; <br/>
  <br/>
</example>
</usage>
</directivesynopsis>

<directivesynopsis>
<name>WebAuthWebKdcSSLCertFile</name>
<description>Name of the WebKDC's certificate file.
</description>
<syntax>WebAuthWebkdcSSLCertFile <em>path</em></syntax>
<default>(none)</default>
<contextlist><context>server config</context>
<context>virtual host</context></contextlist>

<usage>
<p>
This is the name of a file holding one or more certificates to verify the 
WebKDC's SSL Certificate with. This directive is only needed if you
are using a self-signed certificate with your WebKDC. If you are using a
self-signed certificate, you should copy that certificate (the file
mentioned in the WebKDC's Apache SSLCertificateFile directive) to a local
file, and point to that file with this directive.
</p>

<p>If the path
is not absolute, then it will be treated as being relative to <code>ServerRoot</code>.</p>

<note><title>Note</title> 
    <p>This directive is only needed when the <b>WebKDC</b> is using a
self-signed certificate. It is not needed if your WebAuth server is using
a self-signed certificate</p>
</note>

<example><title>Example</title>
WebAuthWebKdcSSLCertFile conf/webauth/webkdc.cert
</example>
</usage>
</directivesynopsis>

<directivesynopsis>
<name>WebAuthWebKdcSSLCertCheck</name>
<description>Whether or not to perform SSL certificate checking on the WebKDC's
certificate
</description>
<syntax>WebAuthWebkdcSSLCertCheck on|off</syntax>
<default>on</default>
<contextlist><context>server config</context>
<context>virtual host</context></contextlist>

<usage>
<p>
This directive controls whether or not SSL certificate checking is performed
on the certificate used by the WebKDC when mod_webauth communicates directly
with the WebKDC.
</p>

<note><title>Note</title> 
    <p>Setting this directive to <code>off</code> opens a security hole
and should only be used in development when the 
<a href="#webauthwebkdcsslcertfile"><code>WebAuthWebKdcSSLCertFile</code></a>
directive cannot be used.
</p>
</note>

<example><title>Example</title>
WebAuthWebKdcSSLCertCheck off
</example>
</usage>
</directivesynopsis>



</modulesynopsis>
