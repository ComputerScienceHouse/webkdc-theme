When the user connects to a webauth-protected web page and doesn't have
any existing authentication for that particular service, they are
redirected to a page on webloginplus.stanford.edu (or some similar
weblogin replacement server).

In our original protocol design, the webauth server would set a
.stanford.edu domain cookie containing details of what authentication
method it preferred to use.  In this design, it instead includes that and
related information in the URL on webloginplus that the user is redirected
to, using the normal HTTP GET form data encoding with ';' separating
fields.

The fields included in the GET are as follows:

    si          Session ID (arbitrary data for use by the webauth server)
    at          Authentication type (as a string), e.g. kerberos_v5
    id          Server identity to use, e.g. service/stanford-you
    ru          Return URL (the page to send the client back to after auth)

For example, suppose one attempted to access https://www.stanford.edu/auth/
and that page requires kerberos_v5 authentication with a service name of
service/www-auth.  The user would be redirected to the URL:

    https://webloginplus.stanford.edu/auth?at=kerberos_v5
        ;id=service/www-auth;ru=https://www.stanford.edu/auth/

(all as a single URL; the line breaking above is for the convenience of
the reader).  Note that si, the session ID, may be omitted if the server
doesn't care about such a value, and that id, the server identity, may be
omitted if the specified authentication type doesn't require such data.

The return URL must always be the last attribute given.  This is to aid in
possible workarounds for truncation of the URL, since the return URL may
also be recoverable in the form of the Referrer header passed by the
browser.

Note that if any of the values of these fields contain any special
characters, they must be escaped via the normal URL escaping rules as
specified in RFC 1738.  Note also that ';' was intentionally chosen as the
delimiter character rather than the somewhat more common '&' in compliance
with the recommendations of RFC 1738; among other things, it makes it
easier to put a URL into an HTML <a> tag without having to escape SGML
entities.

The characters that must be escaped in the data (most notably the return
URL but possibly other fields) are:

    ; ? % &

Technically, / should also be escaped, but as it's very unlikely to cause
problems in practice and is a very common character, it's left unescaped
and the webloginplus code will have to deal with that.  The following
characters are not allowed in URLs and therefore shouldn't occur in the
original return URL, but if present also must be escaped:

    < > " # { } | / ^ [ ] `

as well as any occurance of the US-ASCII SPACE character.

Escaping is done by replacing the offending character with % and then a
two-digit hexidecimal code corresponding to the US-ASCII value of that
character, as described in RFC 1738.
