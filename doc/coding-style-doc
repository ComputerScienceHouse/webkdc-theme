                      Documentation Style Guidelines
              $Revision$ $Date$

  The following documentation guidelines should be followed when writing
  documentation for ITSS Infrastructure Services coding projects.  They
  are aimed at the documentation requirements for a locally maintained
  application (rather than the more general problem of documenting
  services or procedures).

Package Documentation Files

  Any application should contain, at the top level, the following
  documentation files:

    INSTALL     How to compile, install, and configure the package.
    NEWS        User-visible changes (see below for format).
    README      A brief description of the package and contatct info.
    TODO        Things yet to be done.

  The preferred format for these documentation files is something like the
  format of this file:  plain text, with a centered top heading and
  outdented section headings.  This is to allow easier automated
  conversion to HTML.  (Alternately, these files can be maintained in POD
  and generated using pod2text.)

  Every package should be released under some particular license, even if
  that license is just "no redistribution outside of Stanford University."
  That license should either be included in the README file or in a
  separate file named LICENSE at the top level of the source tree.

  The NEWS file should document user-visible changes to the package.  The
  preferred format looks like:

      package 1.3 (2002-10-03)

          Description of changes in that release.

      package 1.2 (2002-08-20)

          Description of changes in that release.

  and so forth.  In other words, a series of headings giving the package
  name, version, and date of release, and then indented paragraphs
  describing the user-visible changes that went into that version.  The
  descriptions should be brief and intended for the user of the package;
  purely internal changes don't need to be documented except in the CVS
  commit messages.

Program Documentation

  Every non-trivial program should have a manual page.  The best way to
  maintain a manual page is to write it in POD, rather than trying to
  maintain nroff by hand, since more people are likely to know POD and
  it's faster to pick up.  To learn about POD, read man perlpod.  It's
  also worth reviewing the POD documentation for other programs that we've
  already written to get a feel for the formatting style.

  In short:  Any program switches should be enclosed in B<>, any
  user-supplied options should be enclosed in I<>, and any references to
  the command itself should be enclosed in B<>.  References to files, such
  as configuration files, should be enclosed in F<>.

  The documentation should at a minimum include NAME, SYNOPSIS,
  DESCRIPTION, EXAMPLES, AUTHOR or AUTHORS, and COPYRIGHT AND LICENSE
  sections in that order.  If it has any command-line options, there
  should also be an OPTIONS section immediately following the DESCRIPTION
  section.  These should all be =head1 sections in POD.

  The NAME section should consist solely of a single line containing the
  program name, a space, a single dash, a space, and a brief one-line
  description of what it does.  This section is treated specially by man
  reading programs, so stick to this syntax religiously.

  The SYNOPSIS section should describe the command-line syntax of the
  program.  The DESCRIPTION section should describe in detail what the
  program does.

  The OPTIONS section should be an =over 4 list of options, each one
  introduced with an =item line, closed with =back.

  There are additional sections that are often useful or desirable,
  including FILES, ENVIRONMENT, DIAGNOSTICS, SEE ALSO, WARNINGS, etc.  For
  additional information on how to write good man pages, see man pod2man.

  The man page should then be generated automatically from the POD at
  build time, using a Makefile rule such as:

      kftgt.1: kftgt.pod
              pod2man -r `cat VERSION` -c "User Commands" $< > $@

  --release and --center (-r and -c; the spelled out versions may be
  preferrable if longer) should always be set, since the defaults assume
  that the command is part of the currently installed version of Perl.  In
  the above example, the package version is stored in a file named
  VERSION; this is a convenient standard for both generating documentation
  and supporting make dist.
