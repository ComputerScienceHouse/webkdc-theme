$Id$

The following coding style should be followed when writing code for
Webauth.

General coding guidelines:

 * Write in regular ANSI C whenever possible.  Use the normal ANSI and
   POSIX constructs and use autoconf or portability wrappers to fix things
   up beforehand so that the code itself can read like regular ANSI or
   POSIX code.  Code should be written so that it works as expected on a
   modern platform and is fixed up with portability tricks for older
   platforms, not the other way around.  You may assume an ANSI C
   compiler.

   Try to use const wherever appropriate.  Don't use register; modern
   compilers will do as good of a job as you will in choosing what to put
   into a register.  Don't bother with restrict (at least yet).

 * Avoid #ifdef and friends whenever possible.  Particularly avoid using
   them in the middle of code blocks.  Try to hide all portability
   preprocessor magic in header files or in portability code in lib. When
   something just has to be done two completely different ways depending
   on the platform or compile options or the like, try to abstract that
   functionality out into a generic function and provide two separate
   implementations using #ifdef; then the main code can just call that
   function.

   If you do have to use preprocessor defines, note that if you always
   define them to either 0 or 1 (never use #define without a second
   argument), you can use the preprocessor define in a regular if
   statement rather than using #if or #ifdef.  Make use of this instead of
   #ifdef when possible, since that way the compiler will still
   syntax-check the other branch for you and it makes it far easier to
   convert the code to use a run-time check if necessary. (Unfortunately,
   this trick can't be used if one branch may call functions unavailable
   on a particular platform.)

 * Plain structs make perfectly reasonable abstract data types; it's not
   necessary to typedef the struct to something else.  Structs are
   actually very useful for opaque data structures, since you can
   predeclare them and then manipulate pointers to them without ever
   having to know what the contents look like.  Please try to avoid
   typedefs except for function pointers or other extremely confusing data
   types, or for data types where we really gain some significant data
   abstraction from hiding the underlying data type.  Also avoid using the
   _t suffix for any type; all types ending in _t are reserved by POSIX.
   For typedefs of function pointer types, a suffix of _func usually
   works.

 * Checks for NULL pointers are preferrably written out explicitly; in
   other words, use:

       if (p != NULL)

   rather than:

       if (p)

   to make it clearer what the code is assuming.

Syntax and indentation:

 * At most 79 characters per line (and preferrably 78 so that patches are
   still under 80 columns).  Split long strings between multiple lines
   using ANSI string concatenation.

 * Roughly BSD style but with four-space indents.  This means no space
   before or after the parens around function arguments, open brace on the
   same line as if/while/for, and close and open brace on the same line as
   else).  Prefer a space between the cast and the variable being cast.

 * Introductory comments for functions or files are generally written
   as:

       /*
       **  Introductory comment.
       */

   Other multiline comments in the source are generally written as:

       /* This is a
          multiline comment. */

   Every function should have a comment before it saying what it does, and
   explaining its return value and side effects.  In general, put the
   RCS/CVS Id tag is on the first line of each source file since it's
   useful to know when a file was last modified.

 * When noting something that should be improved later, add a comment
   containing "FIXME:" so that one can easily grep for such comments.

 * It's better to always put the body of an if statement on a separate
   line, even if it's only a single line.  In other words, write:

       if (p != NULL)
           return p;

   and not:

       if (p != NULL) return p;

   This is in part for a practical reason:  Some code coverage analysis
   tools like purecov will count the second example above as a single line
   and won't notice if the condition always evaluates the same way.

 * Don't use tabs in source files, since they can expand differently in
   different environments.  In particular, please try not to use the mix
   of tabs and spaces that is the default in Emacs.

The preferred indentation style roughly corresponds to that produced by
GNU indent 2.2.6 with the following options:

    -bad -bap -nsob -fca -lc78 -cd41 -cp1 -br -ce -cdw -cli0 -ss -npcs
    -ncs -di1 -nbc -psl -brs -i4 -ci4 -lp -ts8 -nut -ip5 -lps -l78 -bbo
    -hnl

Unfortunately, indent currently doesn't get everything right (it has
problems with spacing around struct pointer arguments in functions, wants
to put in a space between a dereference of a function pointer and the
arguments to the called function, misidentifies some macro calls as being
type declarations, and fouls up long but simple case statements).

The following should be added to the end of every source file so that
people editing the file in Emacs will get the right settings
automatically:

    /*
    **  Local variables:
    **  mode: c
    **  c-basic-offset: 4
    **  indent-tabs-mode: nil
    */

If enough users start using vim to edit code, the corresponding vim magic
comment can also be added.
