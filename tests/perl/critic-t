#!/usr/bin/perl
#
# Check for perlcritic errors in included Perl scripts.
#
# Checks all Perl scripts in the tree for problems uncovered by perlcritic.
# This test is disabled unless RRA_MAINTAINER_TESTS is set, since coding style
# will not interfere with functionality.
#
# Copyright 2012
#     The Board of Trustees of the Leland Stanford Junior University
#
# See LICENSE for licensing terms.

use strict;
use warnings;

use File::Spec;
use Test::More;

# Top-level directories to ignore.  We ignore the perl directory since it is
# treated as a Perl module distribution and has its own standalone test suite.
my %IGNORE = map { $_ => 1 } qw(.git perl tests);

# Bail if SOURCE is not set.
if (!$ENV{SOURCE}) {
    BAIL_OUT('SOURCE not defined (run under runtests)');
}

# Skip tests unless we're running the test suite in maintainer mode.
if (!$ENV{RRA_MAINTAINER_TESTS}) {
    plan skip_all => 'Coding style tests only run for maintainer';
}

# Skip tests if Test::Perl::Critic is not installed.
if (!eval { require Test::Perl::Critic }) {
    plan skip_all => 'Test::Perl::Critic required to test coding style';
}

# SOURCE will be the test directory.  Change to the parent directory.
my ($rootvol, $rootdirs) = File::Spec->splitpath($ENV{SOURCE}, 1);
my @rootdirs = File::Spec->splitdir($rootdirs);
pop @rootdirs;
my $root = File::Spec->catpath($rootvol, File::Spec->catdir(@rootdirs), q{});
chdir $root or BAIL_OUT("cannot chdir to $root: $!");

# Force the embedded Perl::Tidy check to use the correct configuration.
local $ENV{PERLTIDY} = $ENV{SOURCE} . '/data/perltidyrc';

# Import the configuration file and run Perl::Critic.
my $profile = "$ENV{SOURCE}/data/perlcriticrc";
Test::Perl::Critic->import(-profile => $profile);

# Build the list of directories to test.
opendir my $rootdir, q{.} or BAIL_OUT("cannot open .: $!");
my @dirs = grep { -d $_ && !$IGNORE{$_} } readdir $rootdir;
closedir $rootdir;
@dirs = File::Spec->no_upwards(@dirs);

# Finally, run the actual tests.
all_critic_ok(@dirs);
