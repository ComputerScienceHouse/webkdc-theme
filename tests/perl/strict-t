#!/usr/bin/perl
#
# Check Perl scripts for strict, warnings, and syntax.
#
# Checks all Perl scripts in the tree for problems uncovered by Test::Strict.
# This includes using strict and warnings for every script and ensuring they
# all pass a syntax check.  Currently, test suite coverage is not checked.
#
# Copyright 2012
#     The Board of Trustees of the Leland Stanford Junior University
#
# See LICENSE for licensing terms.

use strict;
use warnings;

use File::Spec;
use Test::More;

# Top-level directories to ignore.  We ignore the perl directory since it is
# treated as a Perl module distribution and has its own standalone test suite.
my %IGNORE = map { $_ => 1 } qw(.git perl);

# Bail if SOURCE is not set.
if (!$ENV{SOURCE}) {
    BAIL_OUT('SOURCE not defined (run under runtests)');
}

# Skip tests if Test::Strict is not installed.
if (!eval { require Test::Strict }) {
    plan skip_all => 'Test::Strict required to test Perl scripts';
    $Test::Strict::TEST_WARNINGS = 0;    # suppress warning
}
Test::Strict->import;

# SOURCE will be the test directory.  Change to the parent directory.
my ($rootvol, $rootdirs) = File::Spec->splitpath($ENV{SOURCE}, 1);
my @rootdirs = File::Spec->splitdir($rootdirs);
pop @rootdirs;
my $root = File::Spec->catpath($rootvol, File::Spec->catdir(@rootdirs), q{});
chdir $root or BAIL_OUT("cannot chdir to $root: $!");

# Build the list of directories to test.
opendir my $rootdir, q{.} or BAIL_OUT("cannot open .: $!");
my @dirs = grep { -d $_ && !$IGNORE{$_} } readdir $rootdir;
closedir $rootdir;
@dirs = File::Spec->no_upwards(@dirs);

# Finally, run the actual tests.  We also want to check use warnings.
$Test::Strict::TEST_WARNINGS = 1;
all_perl_files_ok(@dirs);
