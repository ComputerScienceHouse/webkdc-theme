#!/usr/bin/perl
#
# Check Perl scripts for strict, warnings, and syntax.
#
# Checks all Perl scripts in the tree for problems uncovered by Test::Strict.
# This includes using strict and warnings for every script and ensuring they
# all pass a syntax check.  Currently, test suite coverage is not checked.
#
# Copyright 2012
#     The Board of Trustees of the Leland Stanford Junior University
#
# See LICENSE for licensing terms.

use strict;
use warnings;

use File::Spec;
use Test::More;

# Skip tests if Test::Strict is not installed.
if (!eval { require Test::Strict }) {
    plan skip_all => 'Test::Strict required to test Perl scripts';
    $Test::Strict::TEST_WARNINGS = 0;    # suppress warning
}
Test::Strict->import;

# Bail if SOURCE is not set, and determine the directory that all further
# file names will be relative to.
if (!$ENV{SOURCE}) {
    BAIL_OUT('SOURCE not defined (run under runtests)');
}
my ($rootvol, $rootdirs) = File::Spec->splitpath($ENV{SOURCE}, 1);
my @rootdirs = File::Spec->splitdir($rootdirs);
pop @rootdirs;
my $BASE = File::Spec->catpath($rootvol, File::Spec->catdir(@rootdirs));

# Convert a file name, relative to SOURCE/.., into a full path.
sub path_of_dir {
    my ($dir) = @_;
    my $base = File::Spec->updir($ENV{SOURCE});
    return File::Spec->catdir($base, $dir);
}

# Build the list of directories to test.  We test all Perl scripts in all
# top-level directories except those in perl, since the files under perl
# are trested as a Perl module distribution and have their own standalone
# test suite.
opendir my $root, File::Spec->updir($ENV{SOURCE})
  or BAIL_OUT('Cannot open ' . File::Spec->updir($ENV{SOURCE}));
my @dirs = grep { -d $_ && $_ ne 'perl' } readdir $root;
closedir $root;
@dirs = File::Spec->no_upwards(@dirs);
my @paths = map { File::Spec->catdir($BASE, $_) } @dirs;

# Finally, run the actual tests.  We also want to check use warnings.
$Test::Strict::TEST_WARNINGS = 1;
all_perl_files_ok(@paths);
