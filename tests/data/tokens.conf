# -*- perl -*-
#
# Definitions of tokens for testing purposes.
#
# This file is Perl code and is intended to be loaded via require.  It defines
# three variables: %TOKENS_GOOD, %TOKENS_ERROR, and %TOKENS_BAD.  Each is a
# hash of short token names to anonymous arrays.  The first element of the
# array is the name of a WebAuth::Token::* class; the second element is a hash
# of token attributes to values.
#
# This is used to generate the test tokens, to verify the data in the test
# tokens, and to use as test data for token encoding tests.
# tools/webauth-make-tokens can be used to generate tokens for test purposes
# using this data.
#
# Written by Russ Allbery <rra@stanford.edu>
# Copyright 2011, 2012, 2013
#     The Board of Trustees of the Leland Stanford Junior University
#
# See LICENSE for licensing terms.

# Valid tokens that will decode without errors.
our %TOKENS_GOOD = (
    'app-authz' => [
        'WebAuth::Token::App',
        {
            subject         => 'testuser',
            authz_subject   => 'otheruser',
            creation        => 1308777900,
            expiration      => 2147483600,
        }
    ],
    'app-minimal' => [
        'WebAuth::Token::App',
        {
            subject         => 'testuser',
            expiration      => 2147483600,
        }
    ],
    'app-ok' => [
        'WebAuth::Token::App',
        {
            subject         => 'testuser',
            last_used       => 1308777930,
            initial_factors => 'p',
            session_factors => 'c',
            loa             => 1,
            creation        => 1308777900,
            expiration      => 2147483600,
        }
    ],
    'app-session' => [
        'WebAuth::Token::App',
        {
            session_key     => "\0\0;s=test;\0",
            expiration      => 2147483600,
        }
    ],

    'cred-ok' => [
        'WebAuth::Token::Cred',
        {
            subject         => 'testuser',
            type            => 'krb5',
            service         => 'webauth/example.com@EXAMPLE.COM',
            data            => "some\0cred;da;;ta",
            creation        => 1308777900,
            expiration      => 2147483600,
        }
    ],

    'error-ok' => [
        'WebAuth::Token::Error',
        {
            code            => 16,
            message         => 'user canceled login',
            creation        => 1308777900,
        }
    ],

    'id-authz' => [
         'WebAuth::Token::Id',
         {
             subject         => 'testuser',
             authz_subject   => 'other',
             auth            => 'webkdc',
             creation        => 1308777900,
             expiration      => 2147483600,
         }
     ],
    'id-krb5' => [
         'WebAuth::Token::Id',
         {
             auth            => 'krb5',
             auth_data       => "s=foo\0s=bar;;da",
             initial_factors => 'p',
             session_factors => 'c',
             loa             => 1,
             creation        => 1308777900,
             expiration      => 2147483600,
         }
     ],
    'id-krb5-authz' => [
         'WebAuth::Token::Id',
         {
             auth            => 'krb5',
             auth_data       => "s=foo\0s=bar;;da",
             authz_subject   => 'otheruser',
             creation        => 1308777900,
             expiration      => 2147483600,
         }
     ],
    'id-minimal' => [
         'WebAuth::Token::Id',
         {
             subject         => 'testuser',
             auth            => 'webkdc',
             creation        => 1308777900,
             expiration      => 2147483600,
         }
     ],
    'id-webkdc' => [
        'WebAuth::Token::Id',
        {
            subject         => 'testuser',
            auth            => 'webkdc',
            initial_factors => 'p',
            session_factors => 'c',
            loa             => 1,
            creation        => 1308777900,
            expiration      => 2147483600,
        }
    ],

    'login-otp' => [
        'WebAuth::Token::Login',
        {
            username        => 'testuser',
            otp             => '489147',
            otp_type        => 'o1',
            creation        => 1308777900,
        }
    ],
    'login-otp-minimal' => [
        'WebAuth::Token::Login',
        {
            username        => 'testuser',
            otp             => '489147',
            creation        => 1308777900,
        }
    ],
    'login-pass' => [
        'WebAuth::Token::Login',
        {
            username        => 'testuser',
            password        => 'some;s=password',
            creation        => 1308777900,
        }
    ],

    'proxy-authz' => [
        'WebAuth::Token::Proxy',
        {
            subject         => 'testuser',
            authz_subject   => 'other',
            type            => 'krb5',
            webkdc_proxy    => "s=foo\0s=bar;;da",
            creation        => 1308777900,
            expiration      => 2147483600,
        }
    ],
    'proxy-ok' => [
        'WebAuth::Token::Proxy',
        {
            subject         => 'testuser',
            type            => 'krb5',
            webkdc_proxy    => "s=foo\0s=bar;;da",
            initial_factors => 'p,o1,o,m',
            session_factors => 'p,o1,o,m',
            loa             => 2,
            creation        => 1308777900,
            expiration      => 2147483600,
        }
    ],

    'req-id' => [
        'WebAuth::Token::Request',
        {
            type            => 'id',
            auth            => 'webkdc',
            state           => "s=foo\0s=bar;;da",
            return_url      => 'https://example.com/',
            options         => 'fa',
            initial_factors => 'p,o3,o,m',
            session_factors => 'p,o3,o,m',
            loa             => 3,
            creation        => 1308777900,
        }
    ],
    'req-id-krb5' => [
        'WebAuth::Token::Request',
        {
            type            => 'id',
            auth            => 'krb5',
            state           => "s=foo\0s=bar;;da",
            return_url      => 'https://example.com/',
            options         => 'fa',
            initial_factors => 'p,o3,o,m',
            session_factors => 'p,o3,o,m',
            loa             => 3,
            creation        => 1308777900,
        }
    ],
    'req-minimal' => [
        'WebAuth::Token::Request',
        {
            type            => 'id',
            auth            => 'webkdc',
            return_url      => 'https://example.com/',
            creation        => 1308777900,
        }
    ],
    'req-proxy' => [
        'WebAuth::Token::Request',
        {
            type            => 'proxy',
            proxy_type      => 'krb5',
            state           => "s=foo\0s=bar;;da",
            return_url      => 'https://example.com/',
            options         => 'fa',
            initial_factors => 'p,o3,o,m',
            session_factors => 'p,o3,o,m',
            loa             => 3,
            creation        => 1308777900,
        }
    ],
    'req-command' => [
        'WebAuth::Token::Request',
        {
            command         => 'getTokensRequest',
            creation        => 1308777900,
        }
    ],

    'wkfactor-both' => [
        'WebAuth::Token::WebKDCFactor',
        {
            subject         => 'testuser',
            initial_factors => 'd',
            session_factors => 'x1,k',
            creation        => 1308777900,
            expiration      => 2147483600,
        }
    ],
    'wkfactor-initial' => [
        'WebAuth::Token::WebKDCFactor',
        {
            subject         => 'testuser',
            initial_factors => 'd',
            creation        => 1308777901,
            expiration      => 2147483600,
        }
    ],
    'wkfactor-session' => [
        'WebAuth::Token::WebKDCFactor',
        {
            subject         => 'testuser',
            session_factors => 'd',
            creation        => 1308777900,
            expiration      => 2147483601,
        }
    ],

    'wkproxy-min' => [
        'WebAuth::Token::WebKDCProxy',
        {
            subject         => 'testuser',
            proxy_type      => 'remuser',
            proxy_subject   => 'WEBKDC:remuser',
            creation        => 1308777900,
            expiration      => 2147483600,
        }
    ],
    'wkproxy-ok' => [
        'WebAuth::Token::WebKDCProxy',
        {
            subject         => 'testuser',
            proxy_type      => 'krb5',
            proxy_subject   => 'krb5:service/foo@EXAMPLE.COM',
            data            => "s=foo\0s=bar;;da",
            initial_factors => 'p,o1,o,m',
            loa             => 2,
            creation        => 1308777900,
            expiration      => 2147483600,
        }
    ],

    'wkservice-ok' => [
        'WebAuth::Token::WebKDCService',
        {
            subject         => 'krb5:service/foo@EXAMPLE.COM',
            session_key     => "s=foo\0s=bar;;da",
            creation        => 1308777900,
            expiration      => 2147483600,
        }
    ],
);

# Syntactically valid tokens that will produce errors when decoded, such as
# expired tokens.
our %TOKENS_ERROR = (
    'app-expired' => [
        'WebAuth::Token::App',
        {
            subject         => 'testuser',
            creation        => 1308777900,
            expiration      => 1308871632,
        }
    ],
    'cred-expired' => [
        'WebAuth::Token::Cred',
        {
            subject         => 'testuser',
            type            => 'krb5',
            service         => 'webauth/example.com@EXAMPLE.COM',
            data            => "some\0cred;da;;ta",
            creation        => 1308777900,
            expiration      => 1308871632,
        }
    ],
    'id-expired' => [
        'WebAuth::Token::Id',
        {
            subject         => 'testuser',
            auth            => 'webkdc',
            creation        => 1308777900,
            expiration      => 1308871632,
        }
    ],
    'proxy-expired' => [
        'WebAuth::Token::Proxy',
        {
            subject         => 'testuser',
            type            => 'krb5',
            webkdc_proxy    => "s=foo\0s=bar;;da",
            creation        => 1308777900,
            expiration      => 1308871632,
        }
    ],
    'wkfactor-expired' => [
        'WebAuth::Token::WebKDCFactor',
        {
            subject         => 'testuser',
            initial_factors => 'd',
            creation        => 1308777900,
            expiration      => 1308871632,
        }
    ],
    'wkproxy-expired' => [
        'WebAuth::Token::WebKDCProxy',
        {
            subject         => 'testuser',
            proxy_type      => 'remuser',
            proxy_subject   => 'WEBKDC:remuser',
            data            => 'testuser',
            creation        => 1308777900,
            expiration      => 1308871632,
        }
    ],
    'wkservice-expired' => [
        'WebAuth::Token::WebKDCService',
        {
            subject         => 'krb5:service/foo@EXAMPLE.COM',
            session_key     => "s=foo\0s=bar;;da",
            creation        => 1308777900,
            expiration      => 1308871632,
        }
    ],
);

# Tokens that will cause decoding errors.  Note that these must be generated
# without using the regular token encoding routines, since those routines will
# reject these tokens with errors, and therefore the layout is different.
# There is no token class, the attributes are the encoded form, and the values
# are pre-packed.
our %TOKENS_BAD = (
    'app-bad-session' => {
        t   => 'app',
        s   => 'testuser',
        k   => 'some\0data',
        ct  => pack('N', 1308777900),
        et  => pack('N', 2147483600),
    },
    'app-missing' => {
        t   => 'app',
        et  => pack('N', 2147483600),
    },
    'cred-missing' => {
        t   => 'cred',
        crt => 'krb5',
        crs => 'webauth/example.com@EXAMPLE.COM',
        crd => "some\0cred;da;;ta",
        ct  => pack('N', 1308777900),
        et  => pack('N', 2147483600),
    },
    'cred-type' => {
        t   => 'cred',
        s   => 'testuser',
        crt => 'foo',
        crs => 'webauth/example.com@EXAMPLE.COM',
        crd => ';;a',
        ct  => pack('N', 1308777900),
        et  => pack('N', 2147483600),
    },
    'error-code' => {
        t   => 'error',
        ec  => 'foo',
        em  => 'user canceled login',
        ct  => pack('N', 1308777900),
    },
    'id-type' => {
        t   => 'id',
        sa  => 'foo',
        ct  => pack('N', 1308777900),
        et  => pack('N', 2147483600),
    },
    'login-both' => {
        t   => 'login',
        u   => 'testuser',
        p   => ';;',
        otp => ';',
        ct  => pack('N', 1308777900),
    },
    'login-missing' => {
        t   => 'login',
        u   => 'testuser',
        p   => 'some;s=password',
    },
    'login-neither' => {
        t   => 'login',
        u   => 'testuser',
        ct  => pack('N', 1308777900),
    },
    'proxy-missing' => {
        t   => 'proxy',
        pt  => 'krb5',
        wt  => "s=foo\0s=bar;;da",
        ct  => pack('N', 1308777900),
        et  => pack('N', 2147483600),
    },
    'proxy-type' => {
        t   => 'proxy',
        s   => 'testuser',
        pt  => 'foo',
        wt  => "s=foo\0s=bar;;da",
        ct  => pack('N', 1308777900),
        et  => pack('N', 2147483600),
    },
    'req-auth-type' => {
        t   => 'req',
        rtt => 'id',
        sa  => 'foo',
        ru  => 'https://example.com/',
        ct  => pack('N', 1308777900),
    },
    'req-bad-command' => {
        t   => 'req',
        rtt => 'id',
        cmd => 'foo',
        sa  => 'webkdc',
        ru  => 'https://example.com/',
        ct  => pack('N', 1308777900),
    },
    'req-proxy-type' => {
        t   => 'req',
        rtt => 'proxy',
        pt  => 'foo',
        ru  => 'https://example.com/',
        ct  => pack('N', 1308777900),
    },
    'req-type' => {
        t   => 'req',
        rtt => 'foo',
        ru  => 'https://example.com/',
        ct  => pack('N', 1308777900),
    },
    'wkfactor-missing' => {
        t   => 'webkdc-factor',
        ia  => 'd',
        ct  => pack('N', 1308777900),
        et  => pack('N', 2147483600),
    },
    'wkfactor-none' => {
        t   => 'webkdc-factor',
        s   => 'testuser',
        ct  => pack('N', 1308777900),
        et  => pack('N', 2147483600),
    },
    'wkproxy-type' => {
        t   => 'webkdc-proxy',
        s   => 'testuser',
        pt  => 'foo',
        ps  => 'krb5:webauth/example.com@EXAMPLE.COM',
        ct  => pack('N', 1308777900),
        et  => pack('N', 2147483600),
    },
);

# Ensure this file returns true when required.
1;
