#!/usr/bin/perl
#
# encoding-rules -- Generate encoding rules for WebAuth data.
#
# This script is used by WebAuth maintainers to generate encoding rules, used
# by the webauth_encode and webauth_decode internal library functions, to
# translate structs to and from the WebAuth data serialization format.  This
# is used for token generation, Kerberos credential serialization, and other
# places serialization is needed (such as keyrings and service token caches).
#
# encoding-rules takes as arguments a source file that defines one more more
# structs and then a list of structs for which to generate encodings.  It
# creates, from this, a C source file that defines an array of
# webauth_encoding structs that will translate those structs to and from the
# WebAuth attribute serialization format.
#
# The following options are supported:
#
#   ascii
#
#     Only used for numeric and data attributes.  Encode the attribute in
#     ASCII rather than using a binary form.  For numeric attributes, this
#     means encoding the value as ASCII digits.  For data attributes, this
#     means encoding the value in hex.  The inverse is done when decoding.
#
#   creation
#
#     Only valid for TIME attributes.  This attribute represents a creation
#     time.  If it is not set when encoding, the current time will be encoded
#     as the value of this attribute.
#
#   optional
#
#     Indicates that this attribute is optional in the encoding.  If it is
#     NULL or 0, the attribute will be ommitted when encoding.  If the
#     attribute is missing from an encoded form, this is not a problem.
#     Absent this option, numeric attributes will be encoded as 0 if the value
#     is 0, NULL string and data attributes are an error, and the attribute
#     must be present when parsing the encoded form or an error is reported.
#
#   repeat
#
#     This attribute represents the count of a repeated nested struct, which
#     will be the next attribute in the struct.
#
# Written by Russ Allbery <rra@stanford.edu>
# Copyright 2012
#     The Board of Trustees of the Leland Stanford Junior University
#
# See LICENSE for licensing terms.

use strict;
use warnings;

# Mappings from C types to encoding types.
our %TYPES =
    ('char *'        => 'STRING',
     'const char *'  => 'STRING',
     'int32_t'       => 'INT32',
     'uint32_t'      => 'UINT32',
     'unsigned long' => 'ULONG',
     'time_t'        => 'TIME',
     'void *'        => 'DATA',
     'const void *'  => 'DATA');

# The heading on the generated source file.
our $HEADING = <<EOH;
/*
 * Automatically generated -- do not edit!
 *
 * This file was automatically generated from the encode comments on the
 * members of structs in the WebAuth source using the encoding-rules
 * script.  To make changes, modify either the encode comments or (more
 * rarely) the encoding-rules script and run it again.
 *
 * Copyright 2012
 *     The Board of Trustees of the Leland Stanford Junior University
 *
 * See LICENSE for licensing terms.
 */

#include <portable/system.h>

#include <lib/internal.h>
EOH

# Parse command-line arguments.
my ($source, @structs) = @ARGV;
unless (@structs) {
    die "Syntax: encoding-rules <source> <struct> [<struct> ...]\n";
}
my %structs = map { $_ => 1 } @structs;

# Parse the source file and build our encoding rules.
open (SOURCE, '<', $source) or die "Cannot open $source: $!\n";
my (%rules, $struct, $last);
while (<SOURCE>) {
    if (/^struct (\S+) \{/) {
        next unless $structs{$1};
        $struct = $1;
    } elsif (/^\}/) {
        undef $struct;
        undef $last;
    }
    next unless $struct;

    # Found an attribute with an encoding specified.
    if (m,^\s+(.*?)([\w_]+);\s+/\* encode: (.*?) \*/,) {
        my ($type, $attr, $encode) = ($1, $2, $3);
        $type =~ s/\s+$//;
        unless ($TYPES{$type}) {
            die "$source:$.: unknown type $type\n";
        }

        # The first encode: argument is the name of the attribute.  Any
        # remaining ones are options.
        my @encode = split (/,\s*/, $encode);
        $encode = shift @encode;
        my %options = map { $_ => 1 } @encode;
        if ($options{repeat}) {
            $type = 'REPEAT';
        } else {
            $type = $TYPES{$type};
        }
        if ($type ne 'TIME' && $options{creation}) {
            die "$source:$.: creation option specified on non-TIME attribute"
                . " $attr\n";
        }
        my @rule = ($attr, $type, $encode, \%options);
        $rules{$struct} ||= [];
        push (@{ $rules{$struct} }, \@rule);

        # If this is an attribute of type REPEAT, the next attribute will be
        # the nested struct from which we should derive the nested encoding
        # variable.
        $last = $options{repeat} ? \@rule : undef;
    } elsif ($last && m,^\s+(struct [\w_]+) \*([\w_]+);,) {
        $last->[0] = $2;
        push (@$last, $1);
        undef $last;
    }
}

# Generate the encoding rules.
print $HEADING;
print "#include <$source>\n" unless $source eq 'lib/internal.h';
print "\n";
for my $struct (sort keys %rules) {
    my $name = $struct;
    $name =~ s/^(webauth|wai)_/wai_/;
    print "const struct wai_encoding ${name}_encoding[] = {\n";
    for my $rule (@{ $rules{$struct} }) {
        my ($attr, $type, $encode, $options, $nest) = @$rule;
        my $creation = $options->{creation} ? 'true' : 'false';
        my $optional = $options->{optional} ? 'true' : 'false';
        my $ascii = $options->{ascii} ? 'true' : 'false';
        my $desc = $attr;
        $desc =~ tr/_/ /;
        print   "    {\n";
        print qq(        "$encode",\n);
        print qq(        "$desc",\n);
        print   "        WA_TYPE_$type,\n";
        print   "        $optional, /* optional */\n";
        print   "        $ascii,    /* ascii */\n";
        print   "        $creation, /* creation */\n";
        print   "        offsetof(struct $struct, $attr),\n";
        if ($type eq 'DATA') {
            print "        offsetof(struct $struct, ${attr}_len),\n";
            print "        0,\n";
            print "        NULL\n";
        } elsif ($type eq 'REPEAT') {
            my $nest_name = $nest;
            $nest_name =~ s/^struct (?:(webauth|wai)_)/wai_/;
            print "        offsetof(struct $struct, ${attr}_count),\n";
            print "        sizeof($nest),\n";
            print "        ${nest_name}_encoding\n";
        } else {
            print "        0,\n";
            print "        0,\n";
            print "        NULL\n";
        }
        print "    \},\n";
    }
    print "    WA_ENCODING_END\n";
    print "};\n";
}
